{
  "authorization": {
    "get": {
      "url": "/authorizations/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single authorization."
    },
    "create": {
      "url": "/authorizations",
      "method": "POST",
      "params": {
        "$scopes": null,
        "$note": null,
        "$note_url": null,
        "$client_id": null,
        "client_secret": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The 40 character OAuth app client secret for which to create the token."
        },
        "$fingerprint": null
      },
      "description": "Create a new authorization."
    },
    "update": {
      "url": "/authorizations/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "$scopes": null,
        "add_scopes": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "A list of scopes to add to this authorization."
        },
        "remove_scopes": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "A list of scopes to remove from this authorization."
        },
        "$note": null,
        "$note_url": null,
        "$fingerprint": null
      },
      "description": "Update an existing authorization."
    },
    "delete": {
      "url": "/authorizations/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete an authorization."
    },
    "check": {
      "url": "/applications/:client_id/tokens/:access_token",
      "method": "GET",
      "params": {
        "$client_id": null,
        "$access_token": null
      },
      "description": "Check an authorization"
    },
    "reset": {
      "url": "/applications/:client_id/tokens/:access_token",
      "method": "POST",
      "params": {
        "$client_id": null,
        "$access_token": null
      },
      "description": "Reset an authorization"
    },
    "revoke": {
      "url": "/applications/:client_id/tokens/:access_token",
      "method": "DELETE",
      "params": {
        "$client_id": null,
        "$access_token": null
      },
      "description": "Revoke an authorization for an application"
    },
    "getGrants": {
      "url": "/applications/grants",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List your grants."
    },
    "getGrant": {
      "url": "/applications/grants/:id",
      "method": "GET",
      "params": {
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get a single grant."
    },
    "deleteGrant": {
      "url": "/applications/grants/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a grant."
    },
    "getAll": {
      "url": "/authorizations",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List your authorizations."
    },
    "getOrCreateAuthorizationForApp": {
      "url": "/authorizations/clients/:client_id",
      "method": "PUT",
      "params": {
        "$client_id": null,
        "client_secret": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL."
        },
        "$scopes": null,
        "$note": null,
        "$note_url": null,
        "$fingerprint": null
      },
      "description": "Get or create an authorization for a specific app."
    },
    "getOrCreateAuthorizationForAppAndFingerprint": {
      "url": "/authorizations/clients/:client_id/:fingerprint",
      "method": "PUT",
      "params": {
        "$client_id": null,
        "$fingerprint": null,
        "client_secret": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL."
        },
        "$scopes": null,
        "$note": null,
        "$note_url": null
      },
      "description": "Get or create an authorization for a specific app and fingerprint."
    },
    "revokeGrant": {
      "url": "/applications/:client_id/grants/:access_token",
      "method": "DELETE",
      "params": {
        "$client_id": null,
        "$access_token": null
      },
      "description": "Revoke a grant for an application"
    }
  },
  "activity": {
    "getEvents": {
      "url": "/events",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List public events"
    },
    "getEventsForRepo": {
      "url": "/repos/:owner/:repo/events",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List repository events"
    },
    "getEventsForRepoIssues": {
      "url": "/repos/:owner/:repo/issues/events",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List issue events for a repository"
    },
    "getEventsForRepoNetwork": {
      "url": "/networks/:owner/:repo/events",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List public events for a network of repositories"
    },
    "getEventsForOrg": {
      "url": "/orgs/:org/events",
      "method": "GET",
      "params": {
        "$org": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List public events for an organization"
    },
    "getEventsReceived": {
      "url": "/users/:username/received_events",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List events that a user has received"
    },
    "getEventsReceivedPublic": {
      "url": "/users/:username/received_events/public",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List public events that a user has received"
    },
    "getEventsForUser": {
      "url": "/users/:username/events",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List events performed by a user"
    },
    "getEventsForUserPublic": {
      "url": "/users/:username/events/public",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List public events performed by a user"
    },
    "getEventsForUserOrg": {
      "url": "/users/:username/events/orgs/:org",
      "method": "GET",
      "params": {
        "$username": null,
        "$org": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List events for a user's organization"
    },
    "getFeeds": {
      "url": "/feeds",
      "method": "GET",
      "params": {},
      "description": "Get all feeds available for the authenticated user."
    },
    "getNotifications": {
      "url": "/notifications",
      "method": "GET",
      "params": {
        "all": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "If true, show notifications marked as read. Default: false",
          "default": "false"
        },
        "participating": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "If true, only shows notifications in which the user is directly participating or mentioned. Default: false",
          "default": "false"
        },
        "$since": null,
        "before": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
        }
      },
      "description": "Get all notifications for the current user, grouped by repository."
    },
    "getNotificationsForUser": {
      "url": "/repos/:owner/:repo/notifications",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "all": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "If true, show notifications marked as read. Default: false",
          "default": "false"
        },
        "participating": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "If true, only shows notifications in which the user is directly participating or mentioned. Default: false",
          "default": "false"
        },
        "$since": null,
        "before": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
        }
      },
      "description": "Get all notifications for the given user."
    },
    "markNotificationsAsRead": {
      "url": "/notifications",
      "method": "PUT",
      "params": {
        "last_read_at": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
          "default": "Time.now"
        }
      },
      "description": "Mark notifications as read for authenticated user."
    },
    "markNotificationsAsReadForRepo": {
      "url": "/repos/:owner/:repo/notifications",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "last_read_at": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
          "default": "Time.now"
        }
      },
      "description": "Mark notifications in a repo as read."
    },
    "getNotificationThread": {
      "url": "/notifications/threads/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "View a single notification thread."
    },
    "markNotificationThreadAsRead": {
      "url": "/notifications/threads/:id",
      "method": "PATCH",
      "params": {
        "$id": null
      },
      "description": "Mark a notification thread as read."
    },
    "checkNotificationThreadSubscription": {
      "url": "/notifications/threads/:id/subscription",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Check to see if the current user is subscribed to a thread."
    },
    "setNotificationThreadSubscription": {
      "url": "/notifications/threads/:id/subscription",
      "method": "PUT",
      "params": {
        "$id": null,
        "subscribed": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines if notifications should be received from this thread"
        },
        "ignored": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines if all notifications should be blocked from this thread"
        }
      },
      "description": "This lets you subscribe or unsubscribe from a conversation. Unsubscribing from a conversation mutes all future notifications (until you comment or get @mentioned once more)."
    },
    "deleteNotificationThreadSubscription": {
      "url": "/notifications/threads/:id/subscription",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a notification thread subscription."
    },
    "getStargazersForRepo": {
      "url": "/repos/:owner/:repo/stargazers",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List Stargazers"
    },
    "getStarredReposForUser": {
      "url": "/users/:username/starred",
      "method": "GET",
      "params": {
        "$username": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated)$",
          "invalidmsg": "created or updated (when it was last pushed to); default: created.",
          "description": "",
          "enum": [
            "created",
            "updated"
          ],
          "default": "created"
        },
        "$direction": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List repositories being starred by a user"
    },
    "getStarredRepos": {
      "url": "/user/starred",
      "method": "GET",
      "params": {
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated)$",
          "invalidmsg": "created or updated (when it was last pushed to); default: created.",
          "description": "",
          "enum": [
            "created",
            "updated"
          ],
          "default": "created"
        },
        "$direction": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List repositories being starred by the authenticated user"
    },
    "checkStarringRepo": {
      "url": "/user/starred/:owner/:repo",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Check if you are starring a repository"
    },
    "starRepo": {
      "url": "/user/starred/:owner/:repo",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Star a repository"
    },
    "unstarRepo": {
      "url": "/user/starred/:owner/:repo",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Unstar a repository"
    },
    "getWatchersForRepo": {
      "url": "/repos/:owner/:repo/subscribers",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get watchers for repository."
    },
    "getWatchedReposForUser": {
      "url": "/users/:username/subscriptions",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List repositories being watched by a user."
    },
    "getWatchedRepos": {
      "url": "/user/subscriptions",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List repositories being watched by the authenticated user."
    },
    "getRepoSubscription": {
      "url": "/repos/:owner/:repo/subscription",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get a Repository Subscription."
    },
    "setRepoSubscription": {
      "url": "/repos/:owner/:repo/subscription",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "subscribed": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines if notifications should be received from this repository."
        },
        "ignored": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines if all notifications should be blocked from this repository."
        }
      },
      "description": "Set a Repository Subscription"
    },
    "unwatchRepo": {
      "url": "/repos/:owner/:repo/subscription",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Unwatch a repository."
    }
  },
  "gists": {
    "get": {
      "url": "/gists/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single gist"
    },
    "create": {
      "url": "/gists",
      "method": "POST",
      "params": {
        "$files": null,
        "$description": null,
        "public": {
          "type": "boolean",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Create a gist"
    },
    "edit": {
      "url": "/gists/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "$description": null,
        "$files": null,
        "content": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Updated file contents."
        },
        "filename": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "New name for this file."
        }
      },
      "description": "Edit a gist"
    },
    "star": {
      "url": "/gists/:id/star",
      "method": "PUT",
      "params": {
        "$id": null
      },
      "description": "Star a gist"
    },
    "unstar": {
      "url": "/gists/:id/star",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Unstar a gist"
    },
    "fork": {
      "url": "/gists/:id/forks",
      "method": "POST",
      "params": {
        "$id": null
      },
      "description": "Fork a gist"
    },
    "delete": {
      "url": "/gists/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a gist"
    },
    "getForUser": {
      "url": "/users/:username/gists",
      "method": "GET",
      "params": {
        "$username": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List a user's gists"
    },
    "getAll": {
      "url": "/gists",
      "method": "GET",
      "params": {
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List the authenticated user's gists or if called anonymously, this will return all public gists"
    },
    "getPublic": {
      "url": "/gists/public",
      "method": "GET",
      "params": {
        "$since": null
      },
      "description": "List all public gists"
    },
    "getStarred": {
      "url": "/gists/starred",
      "method": "GET",
      "params": {
        "$since": null
      },
      "description": "List the authenticated user's starred gists"
    },
    "getRevision": {
      "url": "/gists/:id/:sha",
      "method": "GET",
      "params": {
        "$id": null,
        "$sha": null
      },
      "description": "Get a specific revision of a gist"
    },
    "getCommits": {
      "url": "/gists/:id/commits",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "List gist commits"
    },
    "checkStar": {
      "url": "/gists/:id/star",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Check if a gist is starred"
    },
    "getForks": {
      "url": "/gists/:id/forks",
      "method": "GET",
      "params": {
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List gist forks"
    },
    "getComments": {
      "url": "/gists/:gist_id/comments",
      "method": "GET",
      "params": {
        "$gist_id": null
      },
      "description": "List comments on a gist"
    },
    "getComment": {
      "url": "/gists/:gist_id/comments/:id",
      "method": "GET",
      "params": {
        "$gist_id": null,
        "$id": null
      },
      "description": "Get a single comment"
    },
    "createComment": {
      "url": "/gists/:gist_id/comments",
      "method": "POST",
      "params": {
        "$gist_id": null,
        "$body": null
      },
      "description": "Create a comment"
    },
    "editComment": {
      "url": "/gists/:gist_id/comments/:id",
      "method": "PATCH",
      "params": {
        "$gist_id": null,
        "$id": null,
        "$body": null
      },
      "description": "Edit a comment"
    },
    "deleteComment": {
      "url": "/gists/:gist_id/comments/:id",
      "method": "DELETE",
      "params": {
        "$gist_id": null,
        "$id": null
      },
      "description": "Delete a comment"
    }
  },
  "gitdata": {
    "getBlob": {
      "url": "/repos/:owner/:repo/git/blobs/:sha",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get a Blob"
    },
    "createBlob": {
      "url": "/repos/:owner/:repo/git/blobs",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "content": {
          "type": "string",
          "required": true,
          "allow-empty": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "encoding": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Create a Blob"
    },
    "getCommit": {
      "url": "/repos/:owner/:repo/git/commits/:sha",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null
      },
      "description": "Get a Commit"
    },
    "createCommit": {
      "url": "/repos/:owner/:repo/git/commits",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "message": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the commit message"
        },
        "tree": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the SHA of the tree object this commit points to"
        },
        "parents": {
          "type": "string[]",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Array of the SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided, for a merge commit, an array of more than one should be provided."
        },
        "author": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "committer": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Create a Commit"
    },
    "getCommitSignatureVerification": {
      "url": "/repos/:owner/:repo/git/commits/:sha",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null
      },
      "description": "Get a Commit Signature Verification. (In preview period. See README.)"
    },
    "getReference": {
      "url": "/repos/:owner/:repo/git/refs/:ref",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$ref": null
      },
      "description": "Get a Reference"
    },
    "getReferences": {
      "url": "/repos/:owner/:repo/git/refs",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get all References"
    },
    "getTags": {
      "url": "/repos/:owner/:repo/git/refs/tags",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get all tag References"
    },
    "createReference": {
      "url": "/repos/:owner/:repo/git/refs",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "ref": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. NOTE: After creating the reference, on calling (get|update|delete)Reference, drop the leading 'refs/' when providing the 'ref' param."
        },
        "$sha": null
      },
      "description": "Create a Reference"
    },
    "updateReference": {
      "url": "/repos/:owner/:repo/git/refs/:ref",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$ref": null,
        "$sha": null,
        "force": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Boolean indicating whether to force the update or to make sure the update is a fast-forward update. The default is false, so leaving this out or setting it to false will make sure you’re not overwriting work.",
          "default": "false"
        }
      },
      "description": "Update a Reference"
    },
    "deleteReference": {
      "url": "/repos/:owner/:repo/git/refs/:ref",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$ref": null
      },
      "description": "Delete a Reference"
    },
    "getTag": {
      "url": "/repos/:owner/:repo/git/tags/:sha",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null
      },
      "description": "Get a Tag"
    },
    "createTag": {
      "url": "/repos/:owner/:repo/git/tags",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "tag": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the tag"
        },
        "message": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the tag message"
        },
        "object": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the SHA of the git object this is tagging"
        },
        "type": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob."
        },
        "tagger": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "JSON object that contains the following keys: `name` - String of the name of the author of the tag, `email` - String of the email of the author of the tag, `date` - Timestamp of when this object was tagged"
        }
      },
      "description": "Create a Tag Object"
    },
    "getTagSignatureVerification": {
      "url": "/repos/:owner/:repo/git/tags/:sha",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null
      },
      "description": "Get a Tag Signature Verification. (In preview period. See README.)"
    },
    "getTree": {
      "url": "/repos/:owner/:repo/git/trees/:sha",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null,
        "recursive": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Get a Tree"
    },
    "createTree": {
      "url": "/repos/:owner/:repo/git/trees",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "tree": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Array of Hash objects (of path, mode, type and sha) specifying a tree structure"
        },
        "base_tree": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the SHA1 of the tree you want to update with new data"
        }
      },
      "description": "Create a Tree"
    }
  },
  "integrations": {
    "getInstallations": {
      "url": "/app/installations",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "deprecated": "`integrations` has been renamed to `apps`",
      "description": "List the app's installations. (In preview period. See README.)"
    },
    "createInstallationToken": {
      "url": "/installations/:installation_id/access_tokens",
      "method": "POST",
      "params": {
        "$installation_id": null,
        "user_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The id of the user for whom the app is acting on behalf of."
        }
      },
      "deprecated": "`integrations` has been renamed to `apps`",
      "description": "Create a new installation token. (In preview period. See README.)"
    },
    "getInstallationRepositories": {
      "url": "/installation/repositories",
      "method": "GET",
      "params": {
        "user_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The integer ID of a user, to filter results to repositories that are visible to both the installation and the given user."
        }
      },
      "deprecated": "`integrations` has been renamed to `apps`",
      "description": "List repositories that are accessible to the authenticated installation. (In preview period. See README.)"
    },
    "addRepoToInstallation": {
      "url": "/installations/:installation_id/repositories/:repository_id",
      "method": "PUT",
      "params": {
        "$installation_id": null,
        "$repository_id": null
      },
      "deprecated": "`integrations` has been renamed to `apps`",
      "description": "Add a single repository to an installation. (In preview period. See README.)"
    },
    "removeRepoFromInstallation": {
      "url": "/installations/:installation_id/repositories/:repository_id",
      "method": "DELETE",
      "params": {
        "$installation_id": null,
        "$repository_id": null
      },
      "deprecated": "`integrations` has been renamed to `apps`",
      "description": "Remove a single repository from an installation. (In preview period. See README.)"
    }
  },
  "apps": {
    "get": {
      "url": "/app",
      "method": "GET",
      "params": {},
      "description": "Get the authenticated GitHub App. (In preview period. See README.)"
    },
    "getForSlug": {
      "url": "/apps/:app_slug",
      "method": "GET",
      "params": {
        "app_slug": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., https://github.com/settings/apps/:app_slug)."
        }
      },
      "description": "Get a single GitHub App. (In preview period. See README.)"
    },
    "getInstallations": {
      "url": "/app/installations",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List the app's installations. (In preview period. See README.)"
    },
    "getInstallation": {
      "url": "/app/installations/:installation_id",
      "method": "GET",
      "params": {
        "$installation_id": null
      },
      "description": "Get a single installation. (In preview period. See README.)"
    },
    "createInstallationToken": {
      "url": "/installations/:installation_id/access_tokens",
      "method": "POST",
      "params": {
        "$installation_id": null,
        "user_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The id of the user for whom the app is acting on behalf of."
        }
      },
      "description": "Create a new installation token. (In preview period. See README.)"
    },
    "getInstallationRepositories": {
      "url": "/installation/repositories",
      "method": "GET",
      "params": {
        "user_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The integer ID of a user, to filter results to repositories that are visible to both the installation and the given user."
        }
      },
      "description": "List repositories that are accessible to the authenticated installation. (In preview period. See README.)"
    },
    "addRepoToInstallation": {
      "url": "/installations/:installation_id/repositories/:repository_id",
      "method": "PUT",
      "params": {
        "$installation_id": null,
        "$repository_id": null
      },
      "description": "Add a single repository to an installation. (In preview period. See README.)"
    },
    "removeRepoFromInstallation": {
      "url": "/installations/:installation_id/repositories/:repository_id",
      "method": "DELETE",
      "params": {
        "$installation_id": null,
        "$repository_id": null
      },
      "description": "Remove a single repository from an installation. (In preview period. See README.)"
    },
    "getMarketplaceListingPlans": {
      "url": "/marketplace_listing/plans",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List all plans for your Marketplace listing. (In preview period. See README.)"
    },
    "getMarketplaceListingStubbedPlans": {
      "url": "/marketplace_listing/stubbed/plans",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List all stubbed plans for your Marketplace listing. (In preview period. See README.)"
    },
    "getMarketplaceListingPlanAccounts": {
      "url": "/marketplace_listing/plans/:id/accounts",
      "method": "GET",
      "params": {
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List all GitHub accounts (user or organization) on a specific plan. (In preview period. See README.)"
    },
    "getMarketplaceListingStubbedPlanAccounts": {
      "url": "/marketplace_listing/stubbed/plans/:id/accounts",
      "method": "GET",
      "params": {
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List all GitHub accounts (user or organization) on a specific stubbed plan. (In preview period. See README.)"
    },
    "checkMarketplaceListingAccount": {
      "url": "/marketplace_listing/accounts/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Check if a GitHub account is associated with any Marketplace listing. (In preview period. See README.)"
    },
    "checkMarketplaceListingStubbedAccount": {
      "url": "/marketplace_listing/stubbed/accounts/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Check if a stubbed GitHub account is associated with any Marketplace listing. (In preview period. See README.)"
    }
  },
  "issues": {
    "get": {
      "url": "/repos/:owner/:repo/issues/:number",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Get a single issue"
    },
    "create": {
      "url": "/repos/:owner/:repo/issues",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "title": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "assignee": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Login for the user that this issue should be assigned to."
        },
        "milestone": {
          "type": "number",
          "required": false,
          "validation": "^[0-9]+$",
          "invalidmsg": "",
          "description": "Milestone to associate this issue with."
        },
        "labels": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Array of strings - Labels to associate with this issue."
        },
        "$assignees": null
      },
      "description": "Create an issue"
    },
    "edit": {
      "url": "/repos/:owner/:repo/issues/:number",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "title": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "assignee": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Login for the user that this issue should be assigned to."
        },
        "state": {
          "type": "string",
          "required": false,
          "validation": "^(open|closed)$",
          "invalidmsg": "open, closed, default: open",
          "description": "open or closed",
          "enum": [
            "open",
            "closed"
          ],
          "default": "open"
        },
        "milestone": {
          "type": "number",
          "required": false,
          "validation": "^[0-9]+$",
          "invalidmsg": "",
          "description": "Milestone to associate this issue with."
        },
        "labels": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Array of strings - Labels to associate with this issue."
        },
        "$assignees": null
      },
      "description": "Edit an issue"
    },
    "lock": {
      "url": "/repos/:owner/:repo/issues/:number/lock",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Users with push access can lock an issue's conversation."
    },
    "unlock": {
      "url": "/repos/:owner/:repo/issues/:number/lock",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Users with push access can unlock an issue's conversation."
    },
    "getAll": {
      "url": "/issues",
      "method": "GET",
      "params": {
        "filter": {
          "type": "string",
          "required": false,
          "validation": "^(all|assigned|created|mentioned|subscribed)$",
          "invalidmsg": "",
          "description": "",
          "enum": [
            "all",
            "assigned",
            "created",
            "mentioned",
            "subscribed"
          ]
        },
        "state": {
          "type": "string",
          "required": false,
          "validation": "^(open|closed|all)$",
          "invalidmsg": "open, closed, all, default: open",
          "description": "open, closed, or all",
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "default": "open"
        },
        "labels": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "String list of comma separated Label names. Example: bug,ui,@high"
        },
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated|comments)$",
          "invalidmsg": "created, updated, comments, default: created.",
          "description": "",
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "default": "created"
        },
        "$direction": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List all issues across all the authenticated user's visible repositories including owned repositories, member repositories, and organization repositories"
    },
    "getForUser": {
      "url": "/user/issues",
      "method": "GET",
      "params": {
        "filter": {
          "type": "string",
          "required": false,
          "validation": "^(all|assigned|created|mentioned|subscribed)$",
          "invalidmsg": "",
          "description": "",
          "enum": [
            "all",
            "assigned",
            "created",
            "mentioned",
            "subscribed"
          ]
        },
        "state": {
          "type": "string",
          "required": false,
          "validation": "^(open|closed|all)$",
          "invalidmsg": "open, closed, all, default: open",
          "description": "open, closed, or all",
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "default": "open"
        },
        "labels": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "String list of comma separated Label names. Example: bug,ui,@high"
        },
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated|comments)$",
          "invalidmsg": "created, updated, comments, default: created.",
          "description": "",
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "default": "created"
        },
        "$direction": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List all issues across owned and member repositories for the authenticated user"
    },
    "getForOrg": {
      "url": "/orgs/:org/issues",
      "method": "GET",
      "params": {
        "$org": null,
        "filter": {
          "type": "string",
          "required": false,
          "validation": "^(all|assigned|created|mentioned|subscribed)$",
          "invalidmsg": "",
          "description": "",
          "enum": [
            "all",
            "assigned",
            "created",
            "mentioned",
            "subscribed"
          ]
        },
        "state": {
          "type": "string",
          "required": false,
          "validation": "^(open|closed|all)$",
          "invalidmsg": "open, closed, all, default: open",
          "description": "open, closed, or all",
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "default": "open"
        },
        "labels": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "String list of comma separated Label names. Example: bug,ui,@high"
        },
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated|comments)$",
          "invalidmsg": "created, updated, comments, default: created.",
          "description": "",
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "default": "created"
        },
        "$direction": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List all issues for a given organization for the authenticated user"
    },
    "getForRepo": {
      "url": "/repos/:owner/:repo/issues",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "milestone": {
          "type": "string",
          "required": false,
          "validation": "^([0-9]+|none|\\*)$",
          "invalidmsg": "",
          "description": ""
        },
        "state": {
          "type": "string",
          "required": false,
          "validation": "^(open|closed|all)$",
          "invalidmsg": "open, closed, all, default: open",
          "description": "open, closed, or all",
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "default": "open"
        },
        "assignee": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "String User login, `none` for Issues with no assigned User. `*` for Issues with any assigned User."
        },
        "creator": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The user that created the issue."
        },
        "mentioned": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "String User login."
        },
        "labels": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "String list of comma separated Label names. Example: bug,ui,@high"
        },
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated|comments)$",
          "invalidmsg": "created, updated, comments, default: created.",
          "description": "",
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "default": "created"
        },
        "$direction": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List issues for a repository"
    },
    "getAssignees": {
      "url": "/repos/:owner/:repo/assignees",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "List assignees"
    },
    "checkAssignee": {
      "url": "/repos/:owner/:repo/assignees/:assignee",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "assignee": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Login for the user that this issue should be assigned to."
        }
      },
      "description": "Check assignee"
    },
    "addAssigneesToIssue": {
      "url": "/repos/:owner/:repo/issues/:number/assignees",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "assignees": {
          "type": "string[]",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Logins for the users that should be added to the issue."
        }
      },
      "description": "Add assignees to an issue."
    },
    "removeAssigneesFromIssue": {
      "url": "/repos/:owner/:repo/issues/:number/assignees",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "body": {
          "type": "Json",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Remove assignees from an issue."
    },
    "getComments": {
      "url": "/repos/:owner/:repo/issues/:number/comments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List comments on an issue"
    },
    "getCommentsForRepo": {
      "url": "/repos/:owner/:repo/issues/comments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated)$",
          "invalidmsg": "created, updated, default: created.",
          "description": "",
          "enum": [
            "created",
            "updated"
          ],
          "default": "created"
        },
        "$direction": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List comments in a repository"
    },
    "getComment": {
      "url": "/repos/:owner/:repo/issues/comments/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a single comment"
    },
    "createComment": {
      "url": "/repos/:owner/:repo/issues/:number/comments",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$body": null
      },
      "description": "Create a comment"
    },
    "editComment": {
      "url": "/repos/:owner/:repo/issues/comments/:id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "$body": null
      },
      "description": "Edit a comment"
    },
    "deleteComment": {
      "url": "/repos/:owner/:repo/issues/comments/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Delete a comment"
    },
    "getEvents": {
      "url": "/repos/:owner/:repo/issues/:issue_number/events",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$issue_number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List events for an issue"
    },
    "getEventsForRepo": {
      "url": "/repos/:owner/:repo/issues/events",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List events for a repository"
    },
    "getEvent": {
      "url": "/repos/:owner/:repo/issues/events/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a single event"
    },
    "getLabels": {
      "url": "/repos/:owner/:repo/labels",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List all labels for this repository"
    },
    "getLabel": {
      "url": "/repos/:owner/:repo/labels/:name",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$name": null
      },
      "description": "Get a single label"
    },
    "createLabel": {
      "url": "/repos/:owner/:repo/labels",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$name": null,
        "$color": null
      },
      "description": "Create a label"
    },
    "updateLabel": {
      "url": "/repos/:owner/:repo/labels/:oldname",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "oldname": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The old name of the label."
        },
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The new name of the label."
        },
        "$color": null
      },
      "description": "Update a label"
    },
    "deleteLabel": {
      "url": "/repos/:owner/:repo/labels/:name",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$name": null
      },
      "description": "Delete a label"
    },
    "getIssueLabels": {
      "url": "/repos/:owner/:repo/issues/:number/labels",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "List labels on an issue"
    },
    "addLabels": {
      "url": "/repos/:owner/:repo/issues/:number/labels",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "labels": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Add labels to an issue"
    },
    "removeLabel": {
      "url": "/repos/:owner/:repo/issues/:number/labels/:name",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Remove a label from an issue"
    },
    "replaceAllLabels": {
      "url": "/repos/:owner/:repo/issues/:number/labels",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "labels": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Sending an empty array ([]) will remove all Labels from the Issue."
        }
      },
      "description": "Replace all labels for an issue"
    },
    "removeAllLabels": {
      "url": "/repos/:owner/:repo/issues/:number/labels",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Remove all labels from an issue"
    },
    "getMilestoneLabels": {
      "url": "/repos/:owner/:repo/milestones/:number/labels",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Get labels for every issue in a milestone"
    },
    "getMilestones": {
      "url": "/repos/:owner/:repo/milestones",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$state": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(due_on|completeness)$",
          "invalidmsg": "due_on, completeness, default: due_on",
          "description": "due_on, completeness, default: due_on",
          "enum": [
            "due_on",
            "completeness"
          ],
          "default": "due_on"
        },
        "direction": {
          "type": "string",
          "required": false,
          "validation": "^(asc|desc)$",
          "invalidmsg": "asc or desc, default: asc.",
          "description": "",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List milestones for a repository"
    },
    "getMilestone": {
      "url": "/repos/:owner/:repo/milestones/:number",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Get a single milestone"
    },
    "createMilestone": {
      "url": "/repos/:owner/:repo/milestones",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "title": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "$state": null,
        "$description": null,
        "due_on": {
          "type": "Date",
          "required": false,
          "validation": "",
          "invalidmsg": "Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ",
          "description": "Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ"
        }
      },
      "description": "Create a milestone"
    },
    "updateMilestone": {
      "url": "/repos/:owner/:repo/milestones/:number",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "title": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "$state": null,
        "$description": null,
        "due_on": {
          "type": "Date",
          "required": false,
          "validation": "",
          "invalidmsg": "Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ",
          "description": "Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ"
        }
      },
      "description": "Update a milestone"
    },
    "deleteMilestone": {
      "url": "/repos/:owner/:repo/milestones/:number",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Delete a milestone"
    },
    "getEventsTimeline": {
      "url": "/repos/:owner/:repo/issues/:issue_number/timeline",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$issue_number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List events for an issue. (In preview period. See README.)"
    }
  },
  "migrations": {
    "startMigration": {
      "url": "/orgs/:org/migrations",
      "method": "POST",
      "params": {
        "$org": null,
        "repositories": {
          "type": "string[]",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "A list of arrays indicating which repositories should be migrated."
        },
        "lock_repositories": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data. Default: false.",
          "default": "false"
        },
        "exclude_attachments": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size). Default: false.",
          "default": "false"
        }
      },
      "description": "Start a migration. (In preview period. See README.)"
    },
    "getMigrations": {
      "url": "/orgs/:org/migrations",
      "method": "GET",
      "params": {
        "$org": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get a list of migrations. (In preview period. See README.)"
    },
    "getMigrationStatus": {
      "url": "/orgs/:org/migrations/:id",
      "method": "GET",
      "params": {
        "$org": null,
        "$id": null
      },
      "description": "Get the status of a migration. (In preview period. See README.)"
    },
    "getMigrationArchiveLink": {
      "url": "/orgs/:org/migrations/:id/archive",
      "method": "GET",
      "params": {
        "$org": null,
        "$id": null
      },
      "description": "Get the URL to a migration archive. (In preview period. See README.)"
    },
    "deleteMigrationArchive": {
      "url": "/orgs/:org/migrations/:id/archive",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$id": null
      },
      "description": "Delete a migration archive. (In preview period. See README.)"
    },
    "unlockRepoLockedForMigration": {
      "url": "/orgs/:org/migrations/:id/repos/:repo_name/lock",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$id": null,
        "repo_name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Unlock a repository that was locked for migration. (In preview period. See README.)"
    },
    "startImport": {
      "url": "/repos/:owner/:repo/import",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "vcs_url": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The URL of the originating repository."
        },
        "vcs": {
          "type": "string",
          "required": false,
          "validation": "^(subversion|git|mercurial|tfvc)$",
          "invalidmsg": "subversion, git, mercurial, tfvc",
          "description": "The originating VCS type. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
          "enum": [
            "subversion",
            "git",
            "mercurial",
            "tfvc"
          ]
        },
        "vcs_username": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "If authentication is required, the username to provide to vcs_url."
        },
        "vcs_password": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "If authentication is required, the password to provide to vcs_url."
        },
        "tfvc_project": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "For a tfvc import, the name of the project that is being imported."
        }
      },
      "description": "Start an import. (In preview period. See README.)"
    },
    "getImportProgress": {
      "url": "/repos/:owner/:repo/import",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get import progress. (In preview period. See README.)"
    },
    "updateImport": {
      "url": "/repos/:owner/:repo/import",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "vcs_username": {
        "type": "string",
        "required": false,
        "validation": "",
        "invalidmsg": "",
        "description": "The username to provide to the originating repository."
      },
      "vcs_password": {
        "type": "string",
        "required": false,
        "validation": "",
        "invalidmsg": "",
        "description": "The password to provide to the originating repository."
      },
      "description": "Update existing import. (In preview period. See README.)"
    },
    "getImportCommitAuthors": {
      "url": "/repos/:owner/:repo/import/authors",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "since": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the raw step."
        }
      },
      "description": "Get import commit authors. (In preview period. See README.)"
    },
    "mapImportCommitAuthor": {
      "url": "/repos/:owner/:repo/import/authors/:author_id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "author_id": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The commit author id."
        },
        "email": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new Git author email."
        },
        "name": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new Git author name."
        }
      },
      "description": "Map a commit author. (In preview period. See README.)"
    },
    "setImportLfsPreference": {
      "url": "/:owner/:name/import/lfs",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$name": null,
        "use_lfs": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import)."
        }
      },
      "description": "Set import LFS preference. (In preview period. See README.)"
    },
    "getLargeImportFiles": {
      "url": "/:owner/:name/import/large_files",
      "method": "GET",
      "params": {
        "$owner": null,
        "$name": null
      },
      "description": "List files larger than 100MB found during the import. (In preview period. See README.)"
    },
    "cancelImport": {
      "url": "/repos/:owner/:repo/import",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Cancel an import. (In preview period. See README.)"
    }
  },
  "misc": {
    "getCodesOfConduct": {
      "url": "/codes_of_conduct",
      "method": "GET",
      "params": {},
      "description": "List all codes of conduct. (In preview period. See README.)"
    },
    "getCodeOfConduct": {
      "url": "/codes_of_conduct/:key",
      "method": "GET",
      "params": {
        "key": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Ex: contributor_covenant"
        }
      },
      "description": "Get an code of conduct. (In preview period. See README.)"
    },
    "getRepoCodeOfConduct": {
      "url": "/repos/:owner/:repo/community/code_of_conduct",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get the contents of a repository's code of conduct. (In preview period. See README.)"
    },
    "getEmojis": {
      "url": "/emojis",
      "method": "GET",
      "params": {},
      "description": "Lists all the emojis available to use on GitHub."
    },
    "getGitignoreTemplates": {
      "url": "/gitignore/templates",
      "method": "GET",
      "params": {},
      "description": "Lists available gitignore templates"
    },
    "getGitignoreTemplate": {
      "url": "/gitignore/templates/:name",
      "method": "GET",
      "params": {
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the .gitignore template to get e.g. 'C'"
        }
      },
      "description": "Get a single gitignore template"
    },
    "getLicenses": {
      "url": "/licenses",
      "method": "GET",
      "params": {},
      "description": "List all licenses. (In preview period. See README.)"
    },
    "getLicense": {
      "url": "/licenses/:license",
      "method": "GET",
      "params": {
        "license": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Ex: /licenses/mit"
        }
      },
      "description": "Get an individual license. (In preview period. See README.)"
    },
    "getRepoLicense": {
      "url": "/repos/:owner/:repo/license",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get the contents of a repository's license. (In preview period. See README.)"
    },
    "renderMarkdown": {
      "url": "/markdown",
      "method": "POST",
      "params": {
        "text": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The Markdown text to render"
        },
        "mode": {
          "type": "string",
          "required": false,
          "validation": "^(markdown|gfm)$",
          "invalidmsg": "",
          "description": "The rendering mode, `markdown` to render a document as plain Markdown, just like README files are rendered. `gfm` to render a document as user-content, e.g. like user comments or issues are rendered. In GFM mode, hard line breaks are always taken into account, and issue and user mentions are linked accordingly.",
          "enum": [
            "markdown",
            "gfm"
          ],
          "default": "markdown"
        },
        "context": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The repository context. Only taken into account when rendering as `gfm`"
        }
      },
      "description": "Render an arbitrary Markdown document"
    },
    "renderMarkdownRaw": {
      "url": "/markdown/raw",
      "method": "POST",
      "requestFormat": "raw",
      "params": {
        "$data": null
      },
      "description": "Render a Markdown document in raw mode"
    },
    "getMeta": {
      "url": "/meta",
      "method": "GET",
      "params": {},
      "description": "This endpoint provides information about GitHub.com, the service. Or, if you access this endpoint on your organization's GitHub Enterprise installation, this endpoint provides information about that installation."
    },
    "getRateLimit": {
      "url": "/rate_limit",
      "method": "GET",
      "params": {},
      "description": "Get your current rate limit status"
    }
  },
  "orgs": {
    "get": {
      "url": "/orgs/:org",
      "method": "GET",
      "params": {
        "$org": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get an organization"
    },
    "update": {
      "url": "/orgs/:org",
      "method": "PATCH",
      "params": {
        "$org": null,
        "billing_email": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Billing email address. This address is not publicized."
        },
        "company": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The company name."
        },
        "email": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The publicly visible email address."
        },
        "location": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The location."
        },
        "name": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The shorthand name of the company."
        },
        "description": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The description of the company."
        },
        "default_repository_permission": {
          "type": "string",
          "required": false,
          "validation": "^(read|write|admin|none)$",
          "invalidmsg": "read, write, admin, none, default: read",
          "description": "Default permission level members have for organization repositories.",
          "enum": [
            "read",
            "write",
            "admin",
            "none"
          ],
          "default": "read"
        },
        "members_can_create_repositories": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Toggles ability of non-admin organization members to create repositories.",
          "default": true
        }
      },
      "description": "Edit an organization"
    },
    "getAll": {
      "url": "/organizations",
      "method": "GET",
      "params": {
        "since": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The integer ID of the last Organization that you've seen."
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List all organizations"
    },
    "getForUser": {
      "url": "/users/:username/orgs",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List public organization memberships for the specified user."
    },
    "getMembers": {
      "url": "/orgs/:org/members",
      "method": "GET",
      "params": {
        "$org": null,
        "filter": {
          "type": "string",
          "required": false,
          "validation": "^(all|2fa_disabled)$",
          "invalidmsg": "all, 2fa_disabled, default: all",
          "description": "Filter members returned in the list.",
          "enum": [
            "all",
            "2fa_disabled"
          ],
          "default": "all"
        },
        "role": {
          "type": "string",
          "required": false,
          "validation": "^(all|admin|member)$",
          "invalidmsg": "all, admin, member, default: all",
          "description": "Filter members returned by their role.",
          "enum": [
            "all",
            "admin",
            "member"
          ],
          "default": "all"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "Members list"
    },
    "checkMembership": {
      "url": "/orgs/:org/members/:username",
      "method": "GET",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Check membership"
    },
    "removeMember": {
      "url": "/orgs/:org/members/:username",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Remove a member"
    },
    "getPublicMembers": {
      "url": "/orgs/:org/public_members",
      "method": "GET",
      "params": {
        "$org": null
      },
      "description": "Public members list"
    },
    "checkPublicMembership": {
      "url": "/orgs/:org/public_members/:username",
      "method": "GET",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Check public membership"
    },
    "publicizeMembership": {
      "url": "/orgs/:org/public_members/:username",
      "method": "PUT",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Publicize a user's membership"
    },
    "concealMembership": {
      "url": "/orgs/:org/public_members/:username",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Conceal a user's membership"
    },
    "getOrgMembership": {
      "url": "/orgs/:org/memberships/:username",
      "method": "GET",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Get organization membership"
    },
    "addOrgMembership": {
      "url": "/orgs/:org/memberships/:username",
      "method": "PUT",
      "params": {
        "$org": null,
        "$username": null,
        "role": {
          "type": "string",
          "required": true,
          "validation": "^(admin|member)$",
          "invalidmsg": "admin, member",
          "description": "The role to give the user in the organization.",
          "enum": [
            "admin",
            "member"
          ],
          "default": "member"
        }
      },
      "description": "Add or update organization membership"
    },
    "removeOrgMembership": {
      "url": "/orgs/:org/memberships/:username",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Remove organization membership"
    },
    "getPendingOrgInvites": {
      "url": "/orgs/:org/invitations",
      "method": "GET",
      "params": {
        "$org": null
      },
      "description": "List pending organization invites."
    },
    "getOutsideCollaborators": {
      "url": "/orgs/:org/outside_collaborators",
      "method": "GET",
      "params": {
        "$org": null,
        "filter": {
          "type": "string",
          "required": false,
          "validation": "^(all|2fa_disabled)$",
          "invalidmsg": "all, 2fa_disabled, default: all",
          "description": "Filter the list of outside collaborators.",
          "enum": [
            "all",
            "2fa_disabled"
          ],
          "default": "all"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List all users who are outside collaborators of an organization."
    },
    "removeOutsideCollaborator": {
      "url": "/orgs/:org/outside_collaborators/:username",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Remove outside collaborator."
    },
    "convertMemberToOutsideCollaborator": {
      "url": "/orgs/:org/outside_collaborators/:username",
      "method": "PUT",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Convert member to outside collaborator."
    },
    "getTeams": {
      "url": "/orgs/:org/teams",
      "method": "GET",
      "params": {
        "$org": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List teams"
    },
    "getTeam": {
      "url": "/teams/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get team"
    },
    "createTeam": {
      "url": "/orgs/:org/teams",
      "method": "POST",
      "params": {
        "$org": null,
        "$name": null,
        "description": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The description of the team."
        },
        "maintainers": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The logins of organization members to add as maintainers of the team."
        },
        "repo_names": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to."
        },
        "$privacy": null,
        "parent_team_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The ID of a team to set as the parent team."
        }
      },
      "description": "Create team"
    },
    "editTeam": {
      "url": "/teams/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "$name": null,
        "description": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The description of the team."
        },
        "$privacy": null,
        "parent_team_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The ID of a team to set as the parent team."
        }
      },
      "description": "Edit team"
    },
    "deleteTeam": {
      "url": "/teams/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete team"
    },
    "getTeamMembers": {
      "url": "/teams/:id/members",
      "method": "GET",
      "params": {
        "$id": null,
        "role": {
          "type": "string",
          "required": false,
          "validation": "^(member|maintainer|all)$",
          "invalidmsg": "member, maintainer, all, default: all",
          "description": "Filters members returned by their role in the team.",
          "enum": [
            "member",
            "maintainer",
            "all"
          ],
          "default": "all"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List team members"
    },
    "getChildTeams": {
      "url": "/teams/:id/teams",
      "method": "GET",
      "params": {
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List child teams"
    },
    "getTeamMembership": {
      "url": "/teams/:id/memberships/:username",
      "method": "GET",
      "params": {
        "$id": null,
        "$username": null
      },
      "description": "Get team membership"
    },
    "addTeamMembership": {
      "url": "/teams/:id/memberships/:username",
      "method": "PUT",
      "params": {
        "$id": null,
        "$username": null,
        "role": {
          "type": "string",
          "required": false,
          "validation": "^(member|maintainer)$",
          "invalidmsg": "member, maintainer, default: member",
          "description": "The role that this user should have in the team.",
          "enum": [
            "member",
            "maintainer"
          ],
          "default": "member"
        }
      },
      "description": "Add team membership"
    },
    "removeTeamMembership": {
      "url": "/teams/:id/memberships/:username",
      "method": "DELETE",
      "params": {
        "$id": null,
        "$username": null
      },
      "description": "Remove team membership"
    },
    "getTeamRepos": {
      "url": "/teams/:id/repos",
      "method": "GET",
      "params": {
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get team repos"
    },
    "getPendingTeamInvites": {
      "url": "/teams/:id/invitations",
      "method": "GET",
      "params": {
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List pending team invitations."
    },
    "checkTeamRepo": {
      "url": "/teams/:id/repos/:owner/:repo",
      "method": "GET",
      "params": {
        "$id": null,
        "$owner": null,
        "$repo": null
      },
      "description": "Check if a team manages a repository"
    },
    "addTeamRepo": {
      "url": "/teams/:id/repos/:org/:repo",
      "method": "PUT",
      "params": {
        "$id": null,
        "$org": null,
        "$repo": null,
        "permission": {
          "type": "string",
          "required": false,
          "validation": "^(pull|push|admin)$",
          "invalidmsg": "",
          "description": "`pull` - team members can pull, but not push or administer this repository, `push` - team members can pull and push, but not administer this repository, `admin` - team members can pull, push and administer this repository.",
          "enum": [
            "pull",
            "push",
            "admin"
          ]
        }
      },
      "description": "Add team repository"
    },
    "deleteTeamRepo": {
      "url": "/teams/:id/repos/:owner/:repo",
      "method": "DELETE",
      "params": {
        "$id": null,
        "$owner": null,
        "$repo": null
      },
      "description": "Remove team repository"
    },
    "getHooks": {
      "url": "/orgs/:org/hooks",
      "method": "GET",
      "params": {
        "$org": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List hooks"
    },
    "getHook": {
      "url": "/orgs/:org/hooks/:id",
      "method": "GET",
      "params": {
        "$org": null,
        "$id": null
      },
      "description": "Get single hook"
    },
    "createHook": {
      "url": "/orgs/:org/hooks",
      "method": "POST",
      "params": {
        "$org": null,
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Must be passed as \"web\"."
        },
        "config": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Key/value pairs to provide settings for this webhook"
        },
        "events": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines what events the hook is triggered for. Default: [\"push\"].",
          "default": "[\"push\"]"
        },
        "active": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines whether the hook is actually triggered on pushes."
        }
      },
      "description": "Create a hook"
    },
    "editHook": {
      "url": "/orgs/:org/hooks/:id",
      "method": "PATCH",
      "params": {
        "$org": null,
        "$id": null,
        "config": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Key/value pairs to provide settings for this webhook"
        },
        "events": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines what events the hook is triggered for. Default: [\"push\"].",
          "default": "[\"push\"]"
        },
        "active": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines whether the hook is actually triggered on pushes."
        }
      },
      "description": "Edit a hook"
    },
    "pingHook": {
      "url": "/orgs/:org/hooks/:id/pings",
      "method": "POST",
      "params": {
        "$org": null,
        "$id": null
      },
      "description": "Ping a hook"
    },
    "deleteHook": {
      "url": "/orgs/:org/hooks/:id",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$id": null
      },
      "description": "Delete a hook"
    },
    "getBlockedUsers": {
      "url": "/orgs/:org/blocks",
      "method": "GET",
      "params": {
        "$org": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List blocked users. (In preview period. See README.)"
    },
    "checkBlockedUser": {
      "url": "/orgs/:org/blocks/:username",
      "method": "GET",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Check whether you've blocked a user. (In preview period. See README.)"
    },
    "blockUser": {
      "url": "/orgs/:org/blocks/:username",
      "method": "PUT",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Block a user. (In preview period. See README.)"
    },
    "unblockUser": {
      "url": "/orgs/:org/blocks/:username",
      "method": "DELETE",
      "params": {
        "$org": null,
        "$username": null
      },
      "description": "Unblock a user. (In preview period. See README.)"
    }
  },
  "projects": {
    "getRepoProjects": {
      "url": "/repos/:owner/:repo/projects",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$state": null
      },
      "description": "List repository projects. (In preview period. See README.)"
    },
    "getOrgProjects": {
      "url": "/orgs/:org/projects",
      "method": "GET",
      "params": {
        "$org": null,
        "$state": null
      },
      "description": "List organization projects. (In preview period. See README.)"
    },
    "getProject": {
      "url": "/projects/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a project. (In preview period. See README.)"
    },
    "createRepoProject": {
      "url": "/repos/:owner/:repo/projects",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$name": null,
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Create a repository project. (In preview period. See README.)"
    },
    "createOrgProject": {
      "url": "/orgs/:org/projects",
      "method": "POST",
      "params": {
        "$org": null,
        "$name": null,
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Create an organization project. (In preview period. See README.)"
    },
    "updateProject": {
      "url": "/projects/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "$name": null,
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "$state": null
      },
      "description": "Update a project. (In preview period. See README.)"
    },
    "deleteProject": {
      "url": "/projects/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a project. (In preview period. See README.)"
    },
    "getProjectCards": {
      "url": "/projects/columns/:column_id/cards",
      "method": "GET",
      "params": {
        "$column_id": null
      },
      "description": "List project cards. (In preview period. See README.)"
    },
    "getProjectCard": {
      "url": "/projects/columns/cards/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get project card. (In preview period. See README.)"
    },
    "createProjectCard": {
      "url": "/projects/columns/:column_id/cards",
      "method": "POST",
      "params": {
        "$column_id": null,
        "note": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The note of the card."
        },
        "content_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The id of the Issue or Pull Request to associate with this card."
        },
        "content_type": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The type of content to associate with this card. Can be either 'Issue' or 'PullRequest'."
        }
      },
      "description": "Create a project card. (In preview period. See README.)"
    },
    "updateProjectCard": {
      "url": "/projects/columns/cards/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "note": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The note of the card."
        }
      },
      "description": "Update a project card. (In preview period. See README.)"
    },
    "deleteProjectCard": {
      "url": "/projects/columns/cards/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a project card. (In preview period. See README.)"
    },
    "moveProjectCard": {
      "url": "/projects/columns/cards/:id/moves",
      "method": "POST",
      "params": {
        "$id": null,
        "position": {
          "type": "string",
          "required": true,
          "validation": "^(top|bottom|after:\\d+)$",
          "invalidmsg": "",
          "description": "Can be one of top, bottom, or after:<card-id>, where <card-id> is the id value of a card in the same project."
        },
        "column_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The id value of a column in the same project."
        }
      },
      "description": "Move a project card. (In preview period. See README.)"
    },
    "getProjectColumns": {
      "url": "/projects/:project_id/columns",
      "method": "GET",
      "params": {
        "$project_id": null
      },
      "description": "List project columns. (In preview period. See README.)"
    },
    "getProjectColumn": {
      "url": "/projects/columns/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a project column. (In preview period. See README.)"
    },
    "createProjectColumn": {
      "url": "/projects/:project_id/columns",
      "method": "POST",
      "params": {
        "$project_id": null,
        "$name": null
      },
      "description": "Create a project column. (In preview period. See README.)"
    },
    "updateProjectColumn": {
      "url": "/projects/columns/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "$name": null
      },
      "description": "Update a project column. (In preview period. See README.)"
    },
    "deleteProjectColumn": {
      "url": "/projects/columns/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a project column. (In preview period. See README.)"
    },
    "moveProjectColumn": {
      "url": "/projects/columns/:id/moves",
      "method": "POST",
      "params": {
        "$id": null,
        "position": {
          "type": "string",
          "required": true,
          "validation": "^(first|last|after:\\d+)$",
          "invalidmsg": "",
          "description": "Can be one of first, last, or after:<column-id>, where <column-id> is the id value of a column in the same project."
        }
      },
      "description": "Move a project column. (In preview period. See README.)"
    }
  },
  "pull-requests": {
    "get": {
      "url": "/repos/:owner/:repo/pulls/:number",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null
      },
      "description": "Get a single pull request"
    },
    "create": {
      "url": "/repos/:owner/:repo/pulls",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "title": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The title of the pull request."
        },
        "$head": null,
        "$base": null,
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The contents of the pull request."
        },
        "maintainer_can_modify": {
          "type": "boolean",
          "required": false,
          "default": "true",
          "description": "Indicates whether maintainers can modify the pull request."
        }
      },
      "description": "Create a pull request"
    },
    "update": {
      "url": "/repos/:owner/:repo/pulls/:number",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "title": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The title of the pull request."
        },
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The contents of the pull request."
        },
        "state": {
          "type": "string",
          "required": false,
          "validation": "^(open|closed)$",
          "invalidmsg": "open, closed",
          "description": "open or closed",
          "enum": [
            "open",
            "closed"
          ]
        },
        "base": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The branch (or git ref) you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repo that requests a merge to a base of another repo."
        },
        "maintainer_can_modify": {
          "type": "boolean",
          "required": false,
          "default": "true",
          "description": "Indicates whether maintainers can modify the pull request."
        }
      },
      "description": "Update a pull request"
    },
    "merge": {
      "url": "/repos/:owner/:repo/pulls/:number/merge",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "commit_title": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Title for the automatic commit message. (In preview period. See README.)"
        },
        "commit_message": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Extra detail to append to automatic commit message."
        },
        "sha": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "SHA that pull request head must match to allow merge"
        },
        "merge_method": {
          "type": "string",
          "required": false,
          "validation": "^(merge|squash|rebase)$",
          "invalidmsg": "Possible values are: `merge`, `squash`, `rebase` Default: `merge`",
          "description": "Merge method to use. Possible values are `merge`, `squash`, or `rebase`. (In preview period. See README.)",
          "enum": [
            "merge",
            "squash",
            "rebase"
          ],
          "default": "merge"
        }
      },
      "description": "Merge a pull request (Merge Button)"
    },
    "getAll": {
      "url": "/repos/:owner/:repo/pulls",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$state": null,
        "head": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Filter pulls by head user and branch name in the format of user:ref-name. Example: github:new-script-format."
        },
        "base": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Filter pulls by base branch name. Example: gh-pages."
        },
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated|popularity|long-running)$",
          "invalidmsg": "Possible values are: `created`, `updated`, `popularity`, `long-running`, Default: `created`",
          "description": "Possible values are: `created`, `updated`, `popularity`, `long-running`, Default: `created`",
          "enum": [
            "created",
            "updated",
            "popularity",
            "long-running"
          ],
          "default": "created"
        },
        "$direction": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List pull requests"
    },
    "createFromIssue": {
      "url": "/repos/:owner/:repo/pulls",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "issue": {
          "type": "number",
          "required": true,
          "validation": "^[0-9]+$",
          "invalidmsg": "",
          "description": "The issue number in this repository to turn into a Pull Request."
        },
        "$head": null,
        "$base": null
      },
      "description": "Create a pull request from an existing issue"
    },
    "getCommits": {
      "url": "/repos/:owner/:repo/pulls/:number/commits",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List commits on a pull request"
    },
    "getFiles": {
      "url": "/repos/:owner/:repo/pulls/:number/files",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List pull requests files"
    },
    "checkMerged": {
      "url": "/repos/:owner/:repo/pulls/:number/merge",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get if a pull request has been merged"
    },
    "getReviews": {
      "url": "/repos/:owner/:repo/pulls/:number/reviews",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List reviews on a pull request."
    },
    "getReview": {
      "url": "/repos/:owner/:repo/pulls/:number/reviews/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$id": null
      },
      "description": "Get a single pull request review."
    },
    "deletePendingReview": {
      "url": "/repos/:owner/:repo/pulls/:number/reviews/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$id": null
      },
      "description": "Delete a pending pull request review."
    },
    "getReviewComments": {
      "url": "/repos/:owner/:repo/pulls/:number/reviews/:id/comments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get comments for a pull request review."
    },
    "createReview": {
      "url": "/repos/:owner/:repo/pulls/:number/reviews",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "commit_id": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "Sha of the commit to comment on.",
          "description": "Sha of the commit to comment on."
        },
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The body text of the pull request review."
        },
        "event": {
          "type": "string",
          "required": false,
          "validation": "^(APPROVE|REQUEST_CHANGES|COMMENT|PENDING)$",
          "invalidmsg": "Possible values are: `APPROVE`, `REQUEST_CHANGES`, `COMMENT`, `PENDING`. Default: `PENDING`",
          "description": "The event to perform on the review upon submission, can be one of APPROVE, REQUEST_CHANGES, or COMMENT. If left blank, the review will be in the PENDING state.",
          "enum": [
            "APPROVE",
            "REQUEST_CHANGES",
            "COMMENT",
            "PENDING"
          ],
          "default": "PENDING"
        },
        "comments": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of draft review comment objects. Draft review comments must include a `path`, `position`, and `body`."
        }
      },
      "description": "Create a pull request review."
    },
    "submitReview": {
      "url": "/repos/:owner/:repo/pulls/:number/reviews/:id/events",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$id": null,
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The body text of the pull request review."
        },
        "event": {
          "type": "string",
          "required": false,
          "validation": "^(APPROVE|REQUEST_CHANGES|COMMENT|PENDING)$",
          "invalidmsg": "Possible values are: `APPROVE`, `REQUEST_CHANGES`, `COMMENT`, `PENDING`. Default: `PENDING`",
          "description": "The event to perform on the review upon submission, can be one of APPROVE, REQUEST_CHANGES, or COMMENT. If left blank, the review will be in the PENDING state.",
          "enum": [
            "APPROVE",
            "REQUEST_CHANGES",
            "COMMENT",
            "PENDING"
          ],
          "default": "PENDING"
        }
      },
      "description": "Submit a pull request review."
    },
    "dismissReview": {
      "url": "/repos/:owner/:repo/pulls/:number/reviews/:id/dismissals",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$id": null,
        "message": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The message for the pull request review dismissal."
        },
        "$page": null,
        "$per_page": null
      },
      "description": "Dismiss a pull request review."
    },
    "getComments": {
      "url": "/repos/:owner/:repo/pulls/:number/comments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List comments on a pull request"
    },
    "getCommentsForRepo": {
      "url": "/repos/:owner/:repo/pulls/comments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated)$",
          "invalidmsg": "Possible values are: `created`, `updated`, Default: `created`",
          "description": "Possible values are: `created`, `updated`, Default: `created`",
          "enum": [
            "created",
            "updated"
          ],
          "default": "created"
        },
        "$direction": null,
        "$since": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List comments in a repository"
    },
    "getComment": {
      "url": "/repos/:owner/:repo/pulls/comments/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a single comment"
    },
    "createComment": {
      "url": "/repos/:owner/:repo/pulls/:number/comments",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$body": null,
        "$commit_id": null,
        "$path": null,
        "$position": null
      },
      "description": "Create a comment"
    },
    "createCommentReply": {
      "url": "/repos/:owner/:repo/pulls/:number/comments",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$body": null,
        "in_reply_to": {
          "type": "number",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The comment id to reply to."
        }
      },
      "description": "Reply to existing pull request comment"
    },
    "editComment": {
      "url": "/repos/:owner/:repo/pulls/comments/:id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "$body": null
      },
      "description": "Edit a comment"
    },
    "deleteComment": {
      "url": "/repos/:owner/:repo/pulls/comments/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Delete a comment"
    },
    "getReviewRequests": {
      "url": "/repos/:owner/:repo/pulls/:number/requested_reviewers",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List review requests. (In preview period. See README.)"
    },
    "createReviewRequest": {
      "url": "/repos/:owner/:repo/pulls/:number/requested_reviewers",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "reviewers": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of user logins that will be requested."
        },
        "team_reviewers": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs that will be requested."
        }
      },
      "description": "Create a review request. (In preview period. See README.)"
    },
    "deleteReviewRequest": {
      "url": "/repos/:owner/:repo/pulls/:number/requested_reviewers",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "reviewers": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of user logins that will be requested."
        },
        "team_reviewers": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs that will be requested."
        }
      },
      "description": "Delete a review request. (In preview period. See README.)"
    }
  },
  "reactions": {
    "delete": {
      "url": "/reactions/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a reaction. (In preview period. See README.)"
    },
    "getForCommitComment": {
      "url": "/repos/:owner/:repo/comments/:id/reactions",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "content": {
          "type": "string",
          "required": false,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "Indicates which type of reaction to return.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "List reactions for a commit comment. (In preview period. See README.)"
    },
    "createForCommitComment": {
      "url": "/repos/:owner/:repo/comments/:id/reactions",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "content": {
          "type": "string",
          "required": true,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "The reaction type.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "Create reaction for a commit comment. (In preview period. See README.)"
    },
    "getForIssue": {
      "url": "/repos/:owner/:repo/issues/:number/reactions",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "content": {
          "type": "string",
          "required": false,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "Indicates which type of reaction to return.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "List reactions for an issue. (In preview period. See README.)"
    },
    "createForIssue": {
      "url": "/repos/:owner/:repo/issues/:number/reactions",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$number": null,
        "content": {
          "type": "string",
          "required": true,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "The reaction type.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "Create reaction for an issue. (In preview period. See README.)"
    },
    "getForIssueComment": {
      "url": "/repos/:owner/:repo/issues/comments/:id/reactions",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "content": {
          "type": "string",
          "required": false,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "Indicates which type of reaction to return.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "List reactions for an issue comment. (In preview period. See README.)"
    },
    "createForIssueComment": {
      "url": "/repos/:owner/:repo/issues/comments/:id/reactions",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "content": {
          "type": "string",
          "required": true,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "The reaction type.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "Create reaction for an issue comment. (In preview period. See README.)"
    },
    "getForPullRequestReviewComment": {
      "url": "/repos/:owner/:repo/pulls/comments/:id/reactions",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "content": {
          "type": "string",
          "required": false,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "Indicates which type of reaction to return.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "List reactions for a pull request review comment. (In preview period. See README.)"
    },
    "createForPullRequestReviewComment": {
      "url": "/repos/:owner/:repo/pulls/comments/:id/reactions",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "content": {
          "type": "string",
          "required": true,
          "validation": "^(\\+1|-1|laugh|confused|heart|hooray)$",
          "invalidmsg": "Possible values: `+1`, `-1`, `laugh`, `confused`, `heart`, `hooray`.",
          "description": "The reaction type.",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ]
        }
      },
      "description": "Create reaction for a pull request review comment. (In preview period. See README.)"
    }
  },
  "repos": {
    "create": {
      "url": "/user/repos",
      "method": "POST",
      "params": {
        "$name": null,
        "$description": null,
        "$homepage": null,
        "$private": null,
        "$has_issues": null,
        "$has_projects": null,
        "$has_wiki": null,
        "team_id": {
          "type": "number",
          "required": false,
          "validation": "^[0-9]+$",
          "invalidmsg": "",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."
        },
        "$auto_init": null,
        "$gitignore_template": null,
        "$license_template": null,
        "allow_squash_merge": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true. (In preview period. See README.)",
          "default": "true"
        },
        "allow_merge_commit": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true. (In preview period. See README.)",
          "default": "true"
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow rebase-merging pull requests, or false to prevent rebase-merging. Default: true. (In preview period. See README.)",
          "default": "true"
        }
      },
      "description": "Create a new repository for the authenticated user."
    },
    "get": {
      "url": "/repos/:owner/:repo",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get a repo for a user."
    },
    "edit": {
      "url": "/repos/:owner/:repo",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$name": null,
        "$description": null,
        "$homepage": null,
        "$private": null,
        "$has_issues": null,
        "$has_projects": null,
        "$has_wiki": null,
        "$default_branch": null,
        "allow_squash_merge": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true. (In preview period. See README.)",
          "default": "true"
        },
        "allow_merge_commit": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true. (In preview period. See README.)",
          "default": "true"
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow rebase-merging pull requests, or false to prevent rebase-merging. Default: true. (In preview period. See README.)",
          "default": "true"
        }
      },
      "description": "Update a repo."
    },
    "delete": {
      "url": "/repos/:owner/:repo",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Delete a repository."
    },
    "fork": {
      "url": "/repos/:owner/:repo/forks",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "organization": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Optional parameter to specify the organization name if forking into an organization."
        }
      },
      "description": "Create a fork."
    },
    "merge": {
      "url": "/repos/:owner/:repo/merges",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$base": null,
        "$head": null,
        "commit_message": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Commit message to use for the merge commit. If omitted, a default message will be used."
        }
      },
      "description": "Perform a merge."
    },
    "getAll": {
      "url": "/user/repos",
      "method": "GET",
      "params": {
        "visibility": {
          "type": "string",
          "required": false,
          "validation": "^(all|public|private)$",
          "invalidmsg": "Possible values: `all`, `public`, `private`, Default: `all`.",
          "description": "Can be one of `all`, `public`, or `private`. Default: `all`.",
          "enum": [
            "all",
            "public",
            "private"
          ],
          "default": "all"
        },
        "affiliation": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "Possible values: `owner`, `collaborator`, `organization_member`, Default: `owner,collaborator,organization_member`.",
          "description": "Comma-separated list of values. Can include: `owner`, `collaborator`, `organization_member`.",
          "default": "owner,collaborator,organization_member"
        },
        "type": {
          "type": "string",
          "required": false,
          "validation": "^(all|owner|public|private|member)$",
          "invalidmsg": "Possible values: `all`, `owner`, `public`, `private`, `member`. Default: `all`.",
          "description": "Possible values: `all`, `owner`, `public`, `private`, `member`. Default: `all`.",
          "enum": [
            "all",
            "owner",
            "public",
            "private",
            "member"
          ],
          "default": "all"
        },
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated|pushed|full_name)$",
          "invalidmsg": "Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`.",
          "description": "Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`.",
          "enum": [
            "created",
            "updated",
            "pushed",
            "full_name"
          ],
          "default": "full_name"
        },
        "$direction": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List your repositories"
    },
    "getForUser": {
      "url": "/users/:username/repos",
      "method": "GET",
      "params": {
        "$username": null,
        "type": {
          "type": "string",
          "required": false,
          "validation": "^(all|owner|member)$",
          "invalidmsg": "Possible values: `all`, `owner`, `member`. Default: `owner`.",
          "description": "Possible values: `all`, `owner`, `member`. Default: `owner`.",
          "enum": [
            "all",
            "owner",
            "member"
          ],
          "default": "owner"
        },
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(created|updated|pushed|full_name)$",
          "invalidmsg": "Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`.",
          "description": "Possible values: `created`, `updated`, `pushed`, `full_name`. Default: `full_name`.",
          "enum": [
            "created",
            "updated",
            "pushed",
            "full_name"
          ],
          "default": "full_name"
        },
        "$direction": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List public repositories for the specified user."
    },
    "getForOrg": {
      "url": "/orgs/:org/repos",
      "method": "GET",
      "params": {
        "$org": null,
        "type": {
          "type": "string",
          "required": false,
          "validation": "^(all|public|private|forks|sources|member)$",
          "invalidmsg": "Possible values: `all`, `public`, `private`, `forks`, `sources`, `member`. Default: `all`.",
          "description": "Possible values: `all`, `public`, `private`, `forks`, `sources`, `member`. Default: `all`.",
          "enum": [
            "all",
            "public",
            "private",
            "forks",
            "sources",
            "member"
          ],
          "default": "all"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List repositories for the specified org."
    },
    "getPublic": {
      "url": "/repositories",
      "method": "GET",
      "params": {
        "since": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The integer ID of the last Repository that you've seen."
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List all public repositories"
    },
    "createForOrg": {
      "url": "/orgs/:org/repos",
      "method": "POST",
      "params": {
        "$org": null,
        "$name": null,
        "$description": null,
        "$homepage": null,
        "$private": null,
        "$has_issues": null,
        "$has_projects": null,
        "$has_wiki": null,
        "team_id": {
          "type": "number",
          "required": false,
          "validation": "^[0-9]+$",
          "invalidmsg": "",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."
        },
        "$auto_init": null,
        "$gitignore_template": null,
        "$license_template": null,
        "allow_squash_merge": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow squash-merging pull requests, or false to prevent squash-merging. Default: true. (In preview period. See README.)",
          "default": "true"
        },
        "allow_merge_commit": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits. Default: true. (In preview period. See README.)",
          "default": "true"
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Either true to allow rebase-merging pull requests, or false to prevent rebase-merging. Default: true. (In preview period. See README.)",
          "default": "true"
        }
      },
      "description": "Create a new repository for an organization."
    },
    "getById": {
      "url": "/repositories/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single repo by id."
    },
    "getTopics": {
      "url": "/repos/:owner/:repo/topics",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List all topics for a repository. (In preview period. See README.)"
    },
    "replaceTopics": {
      "url": "/repos/:owner/:repo/topics",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "names": {
          "type": "string[]",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of topics to add to the repository. Pass one or more topics to replace the set of existing topics. Send an empty array ([]) to clear all topics from the repository."
        }
      },
      "description": "Replace all topics for a repository. (In preview period. See README.)"
    },
    "getContributors": {
      "url": "/repos/:owner/:repo/contributors",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "anon": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Set to 1 or true to include anonymous contributors in results."
        },
        "$page": null,
        "$per_page": null
      },
      "description": "Get contributors for the specified repository."
    },
    "getLanguages": {
      "url": "/repos/:owner/:repo/languages",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get languages for the specified repository."
    },
    "getTeams": {
      "url": "/repos/:owner/:repo/teams",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get teams for the specified repository."
    },
    "getTags": {
      "url": "/repos/:owner/:repo/tags",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get tags for the specified repository."
    },
    "getBranches": {
      "url": "/repos/:owner/:repo/branches",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "protected": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Set to true to only return protected branches"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List branches."
    },
    "getBranch": {
      "url": "/repos/:owner/:repo/branches/:branch",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get branch."
    },
    "getBranchProtection": {
      "url": "/repos/:owner/:repo/branches/:branch/protection",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get branch protection."
    },
    "updateBranchProtection": {
      "url": "/repos/:owner/:repo/branches/:branch/protection",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "required_status_checks": {
          "type": "Json",
          "required": true,
          "allow-null": true,
          "validation": "",
          "invalidmsg": "",
          "description": "JSON object that contains the following keys: `include_admins` - Enforce required status checks for repository administrators, `strict` - Require branches to be up to date before merging, `contexts` - The list of status checks to require in order to merge into this branch. This object can have the value of `null` for disabled."
        },
        "required_pull_request_reviews": {
          "type": "Json",
          "required": true,
          "allow-null": true,
          "validation": "",
          "invalidmsg": "",
          "description": "JSON object that contains the following keys: `include_admins` - Enforce required status checks for repository administrators."
        },
        "dismissal_restrictions": {
          "type": "Json",
          "required": false,
          "allow-null": true,
          "validation": "",
          "invalidmsg": "",
          "description": "JSON object that contains the following keys: `users` - The list of user logins with dismissal access, `teams` - The list of team slugs with dismissal access. This object can have the value of `null` for disabled."
        },
        "restrictions": {
          "type": "Json",
          "required": true,
          "allow-null": true,
          "validation": "",
          "invalidmsg": "",
          "description": "JSON object that contains the following keys: `users` - The list of user logins with push access, `teams` - The list of team slugs with push access. This object can have the value of `null` for disabled."
        },
        "enforce_admins": {
          "type": "boolean",
          "required": true,
          "allow-null": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Enforces required status checks for repository administrators."
        },
        "$page": null,
        "$per_page": null
      },
      "description": "Update branch protection."
    },
    "removeBranchProtection": {
      "url": "/repos/:owner/:repo/branches/:branch/protection",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Remove branch protection."
    },
    "getProtectedBranchRequiredStatusChecks": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get required status checks of protected branch."
    },
    "updateProtectedBranchRequiredStatusChecks": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "strict": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Require branches to be up to date before merging."
        },
        "contexts": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The list of status checks to require in order to merge into this branch."
        }
      },
      "description": "Update required status checks of protected branch."
    },
    "removeProtectedBranchRequiredStatusChecks": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null
      },
      "description": "Remove required status checks of protected branch."
    },
    "getProtectedBranchRequiredStatusChecksContexts": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List required status checks contexts of protected branch."
    },
    "replaceProtectedBranchRequiredStatusChecksContexts": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "contexts": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of protected branch required status checks contexts (e.g. continuous-integration/jenkins)."
        }
      },
      "description": "Replace required status checks contexts of protected branch."
    },
    "addProtectedBranchRequiredStatusChecksContexts": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "contexts": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of protected branch required status checks contexts (e.g. continuous-integration/jenkins)."
        }
      },
      "description": "Add required status checks contexts of protected branch."
    },
    "removeProtectedBranchRequiredStatusChecksContexts": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "contexts": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of protected branch required status checks contexts (e.g. continuous-integration/jenkins)."
        }
      },
      "description": "Remove required status checks contexts of protected branch."
    },
    "getProtectedBranchPullRequestReviewEnforcement": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get pull request review enforcement of protected branch."
    },
    "updateProtectedBranchPullRequestReviewEnforcement": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "dismissal_restrictions": {
          "type": "Json",
          "required": false,
          "allow-null": true,
          "validation": "",
          "invalidmsg": "",
          "description": "JSON object that contains the following keys: `users` - The list of user logins with dismissal access, `teams` - The list of team slugs with dismissal access. This object can have the value of `null` for disabled."
        },
        "dismiss_stale_reviews": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Dismiss approved reviews automatically when a new commit is pushed."
        },
        "require_code_owner_reviews": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Blocks merge until code owners have reviewed."
        }
      },
      "description": "Update pull request review enforcement of protected branch."
    },
    "removeProtectedBranchPullRequestReviewEnforcement": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null
      },
      "description": "Remove pull request review enforcement of protected branch."
    },
    "getProtectedBranchAdminEnforcement": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get admin enforcement of protected branch."
    },
    "addProtectedBranchAdminEnforcement": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Add admin enforcement of protected branch."
    },
    "removeProtectedBranchAdminEnforcement": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Remove admin enforcement of protected branch."
    },
    "getProtectedBranchRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get restrictions of protected branch."
    },
    "removeProtectedBranchRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null
      },
      "description": "Remove restrictions of protected branch."
    },
    "getProtectedBranchTeamRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List team restrictions of protected branch."
    },
    "replaceProtectedBranchTeamRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "teams": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs (e.g. justice-league)."
        }
      },
      "description": "Replace team restrictions of protected branch."
    },
    "addProtectedBranchTeamRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "teams": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs (e.g. justice-league)."
        }
      },
      "description": "Add team restrictions of protected branch."
    },
    "removeProtectedBranchTeamRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "teams": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs (e.g. justice-league)."
        }
      },
      "description": "Remove team restrictions of protected branch."
    },
    "getProtectedBranchUserRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List user restrictions of protected branch."
    },
    "replaceProtectedBranchUserRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "users": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs (e.g. justice-league)."
        }
      },
      "description": "Replace user restrictions of protected branch."
    },
    "addProtectedBranchUserRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "users": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs (e.g. justice-league)."
        }
      },
      "description": "Add user restrictions of protected branch."
    },
    "removeProtectedBranchUserRestrictions": {
      "url": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$branch": null,
        "users": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "An array of team slugs (e.g. justice-league)."
        }
      },
      "description": "Remove user restrictions of protected branch."
    },
    "getCollaborators": {
      "url": "/repos/:owner/:repo/collaborators",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "affiliation": {
          "type": "string",
          "required": false,
          "validation": "^(outside|all|direct)$",
          "invalidmsg": "outside, all, direct, default: all",
          "description": "Filter collaborators returned by their affiliation.",
          "enum": [
            "outside",
            "all",
            "direct"
          ],
          "default": "all"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List collaborators"
    },
    "checkCollaborator": {
      "url": "/repos/:owner/:repo/collaborators/:username",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$username": null
      },
      "description": "Check if user is a collaborator."
    },
    "reviewUserPermissionLevel": {
      "url": "/repos/:owner/:repo/collaborators/:username/permission",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$username": null
      },
      "description": "Review a user's permission level."
    },
    "addCollaborator": {
      "url": "/repos/:owner/:repo/collaborators/:username",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "$username": null,
        "permission": {
          "type": "string",
          "required": false,
          "validation": "^(pull|push|admin)$",
          "invalidmsg": "",
          "description": "`pull` - can pull, but not push to or administer this repository, `push` - can pull and push, but not administer this repository, `admin` - can pull, push and administer this repository.",
          "enum": [
            "pull",
            "push",
            "admin"
          ],
          "default": "push"
        }
      },
      "description": "Add user as a collaborator"
    },
    "removeCollaborator": {
      "url": "/repos/:owner/:repo/collaborators/:username",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$username": null
      },
      "description": "Remove user as a collaborator."
    },
    "getAllCommitComments": {
      "url": "/repos/:owner/:repo/comments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List commit comments for a repository."
    },
    "getCommitComments": {
      "url": "/repos/:owner/:repo/commits/:ref/comments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "ref": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List comments for a single commit."
    },
    "createCommitComment": {
      "url": "/repos/:owner/:repo/commits/:sha/comments",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null,
        "$body": null,
        "path": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Relative path of the file to comment on."
        },
        "position": {
          "type": "number",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Line index in the diff to comment on."
        }
      },
      "description": "Create a commit comment."
    },
    "getCommitComment": {
      "url": "/repos/:owner/:repo/comments/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a single commit comment."
    },
    "updateCommitComment": {
      "url": "/repos/:owner/:repo/comments/:id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "$body": null
      },
      "description": "Update a commit comment."
    },
    "deleteCommitComment": {
      "url": "/repos/:owner/:repo/comments/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Delete a commit comment."
    },
    "getCommunityProfileMetrics": {
      "url": "/repos/:owner/:name/community/profile",
      "method": "GET",
      "params": {
        "$owner": null,
        "$name": null
      },
      "description": "Retrieve community profile metrics."
    },
    "getCommits": {
      "url": "/repos/:owner/:repo/commits",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "sha": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Sha or branch to start listing commits from."
        },
        "path": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Only commits containing this file path will be returned."
        },
        "author": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "GitHub login or email address by which to filter by commit author."
        },
        "$since": null,
        "$until": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List commits on a repository."
    },
    "getCommit": {
      "url": "/repos/:owner/:repo/commits/:sha",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null
      },
      "description": "Get a single commit."
    },
    "getShaOfCommitRef": {
      "url": "/repos/:owner/:repo/commits/:ref",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$ref": null
      },
      "description": "Get the SHA-1 of a commit reference."
    },
    "compareCommits": {
      "url": "/repos/:owner/:repo/compare/:base...:head",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$base": null,
        "$head": null
      },
      "description": "Compare two commits."
    },
    "getReadme": {
      "url": "/repos/:owner/:repo/readme",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "ref": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually master)"
        }
      },
      "description": "Get the README for the given repository."
    },
    "getContent": {
      "url": "/repos/:owner/:repo/contents/:path",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "path": {
          "type": "string",
          "required": true,
          "allow-empty": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The content path."
        },
        "ref": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The String name of the Commit/Branch/Tag. Defaults to master."
        }
      },
      "description": "Get the contents of a file or directory in a repository."
    },
    "createFile": {
      "url": "/repos/:owner/:repo/contents/:path",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "path": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The content path."
        },
        "message": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The commit message."
        },
        "content": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The new file content, Base64 encoded."
        },
        "branch": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The branch name. If not provided, uses the repository’s default branch (usually master)."
        },
        "committer": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "author": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Create a new file in the given repository."
    },
    "updateFile": {
      "url": "/repos/:owner/:repo/contents/:path",
      "method": "PUT",
      "params": {
        "$owner": null,
        "$repo": null,
        "path": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The content path."
        },
        "message": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The commit message."
        },
        "content": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The updated file content, Base64 encoded."
        },
        "sha": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The blob SHA of the file being replaced."
        },
        "branch": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The branch name. If not provided, uses the repository’s default branch (usually master)."
        },
        "committer": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "author": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Update a file."
    },
    "deleteFile": {
      "url": "/repos/:owner/:repo/contents/:path",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "path": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The content path."
        },
        "message": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The commit message."
        },
        "sha": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The blob SHA of the file being removed."
        },
        "branch": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The branch name. If not provided, uses the repository’s default branch (usually master)."
        },
        "committer": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "author": {
          "type": "Json",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Delete a file."
    },
    "getArchiveLink": {
      "url": "/repos/:owner/:repo/:archive_format/:ref",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "archive_format": {
          "type": "string",
          "required": true,
          "validation": "^(tarball|zipball)$",
          "invalidmsg": "Either tarball or zipball, Default: tarball.",
          "description": "Either tarball or zipball, Deafult: tarball.",
          "enum": [
            "tarball",
            "zipball"
          ],
          "default": "tarball"
        },
        "ref": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "A valid Git reference. Default: the repository’s default branch (usually master)."
        }
      },
      "description": "Get archive link."
    },
    "getDeployKeys": {
      "url": "/repos/:owner/:repo/keys",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List deploy keys."
    },
    "getDeployKey": {
      "url": "/repos/:owner/:repo/keys/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a deploy key."
    },
    "addDeployKey": {
      "url": "/repos/:owner/:repo/keys",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$title": null,
        "$key": null,
        "read_only": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "If true, the key will only be able to read repository contents. Otherwise, the key will be able to read and write."
        }
      },
      "description": "Add a new deploy key."
    },
    "deleteDeployKey": {
      "url": "/repos/:owner/:repo/keys/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Remove a deploy key."
    },
    "getDeployments": {
      "url": "/repos/:owner/:repo/deployments",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "sha": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The short or long sha that was recorded at creation time. Default: none.",
          "default": "none"
        },
        "ref": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the ref. This can be a branch, tag, or sha. Default: none.",
          "default": "none"
        },
        "task": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the task for the deployment. e.g. deploy or deploy:migrations. Default: none.",
          "default": "none"
        },
        "environment": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the environment that was deployed to. e.g. staging or production. Default: none.",
          "default": "none"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List deployments."
    },
    "getDeployment": {
      "url": "/repos/:owner/:repo/deployments/:deployment_id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "deployment_id": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The deployment id."
        }
      },
      "description": "Get a single Deployment. (In preview period. See README.)"
    },
    "createDeployment": {
      "url": "/repos/:owner/:repo/deployments",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "ref": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The ref to deploy. This can be a branch, tag, or sha."
        },
        "task": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The named task to execute. e.g. deploy or deploy:migrations. Default: deploy",
          "default": "deploy"
        },
        "auto_merge": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Optional parameter to merge the default branch into the requested ref if it is behind the default branch. Default: true",
          "default": "true"
        },
        "required_contexts": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Optional array of status contexts verified against commit status checks. If this parameter is omitted from the parameters then all unique contexts will be verified before a deployment is created. To bypass checking entirely pass an empty array. Defaults to all unique contexts."
        },
        "payload": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Optional JSON payload with extra information about the deployment. Default: \"\"",
          "default": "\"\""
        },
        "environment": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the environment that was deployed to. e.g. staging or production. Default: none.",
          "default": "none"
        },
        "description": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Optional short description. Default: \"\"",
          "default": "\"\""
        },
        "transient_environment": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: false. (In preview period. See README.)",
          "default": false
        },
        "production_environment": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Specifies if the given environment is a one that end-users directly interact with. Default: true when environment is `production` and false otherwise. (In preview period. See README.)"
        }
      },
      "description": "Create a deployment. (In preview period. See README.)"
    },
    "getDeploymentStatuses": {
      "url": "/repos/:owner/:repo/deployments/:id/statuses",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "List deployment statuses. (In preview period. See README.)"
    },
    "getDeploymentStatus": {
      "url": "/repos/:owner/:repo/deployments/:id/statuses/:status_id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "id": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The Deployment ID to list the statuses from."
        },
        "status_id": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The Deployment Status ID."
        }
      },
      "description": "List deployment statuses. (In preview period. See README.)"
    },
    "createDeploymentStatus": {
      "url": "/repos/:owner/:repo/deployments/:id/statuses",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "state": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The state of the status. Can be one of pending, success, error, or failure."
        },
        "target_url": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. Default: \"\"",
          "default": "\"\""
        },
        "log_url": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Functionally equivalent to target_url. Default: \"\". (In preview period. See README.)",
          "default": "\"\""
        },
        "description": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "A short description of the status. Default: \"\"",
          "default": "\"\""
        },
        "environment_url": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "URL for accessing the deployment environment. Default: \"\". (In preview period. See README.)",
          "default": "\"\""
        },
        "auto_inactive": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "When true the new `inactive` status is added to all other non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. Default: true. (In preview period. See README.)",
          "default": true
        }
      },
      "description": "Create a deployment status. (In preview period. See README.)"
    },
    "getDownloads": {
      "url": "/repos/:owner/:repo/downloads",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List downloads for a repository."
    },
    "getDownload": {
      "url": "/repos/:owner/:repo/downloads/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a single download."
    },
    "deleteDownload": {
      "url": "/repos/:owner/:repo/downloads/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Delete a download."
    },
    "getForks": {
      "url": "/repos/:owner/:repo/forks",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(newest|oldest|stargazers)$",
          "invalidmsg": "Possible values: `newest`, `oldest`, `stargazers`, default: `newest`.",
          "description": "Possible values: `newest`, `oldest`, `stargazers`, default: `newest`.",
          "enum": [
            "newest",
            "oldest",
            "stargazers"
          ],
          "default": "newest"
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List forks."
    },
    "getInvites": {
      "url": "/repos/:owner/:repo/invitations",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "List invitations for a repository."
    },
    "deleteInvite": {
      "url": "/repos/:owner/:repo/invitations/:invitation_id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$invitation_id": null
      },
      "description": "Delete a repository invitation."
    },
    "updateInvite": {
      "url": "/repos/:owner/:repo/invitations/:invitation_id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$invitation_id": null,
        "permissions": {
          "type": "string",
          "required": false,
          "validation": "^(read|write|admin)$",
          "invalidmsg": "Read, write, or admin.",
          "description": "The permissions that the associated user will have on the repository.",
          "enum": [
            "read",
            "write",
            "admin"
          ]
        }
      },
      "description": "Update a repository invitation."
    },
    "getPages": {
      "url": "/repos/:owner/:repo/pages",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get information about a Pages site. (In preview period. See README.)"
    },
    "requestPageBuild": {
      "url": "/repos/:owner/:repo/pages/builds",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Request a page build. (In preview period. See README.)"
    },
    "getPagesBuilds": {
      "url": "/repos/:owner/:repo/pages/builds",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List Pages builds. (In preview period. See README.)"
    },
    "getLatestPagesBuild": {
      "url": "/repos/:owner/:repo/pages/builds/latest",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get latest Pages build. (In preview period. See README.)"
    },
    "getPagesBuild": {
      "url": "/repos/:owner/:repo/pages/builds/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a specific Pages build. (In preview period. See README.)"
    },
    "getReleases": {
      "url": "/repos/:owner/:repo/releases",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List releases for a repository."
    },
    "getRelease": {
      "url": "/repos/:owner/:repo/releases/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a single release."
    },
    "getLatestRelease": {
      "url": "/repos/:owner/:repo/releases/latest",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get the latest release."
    },
    "getReleaseByTag": {
      "url": "/repos/:owner/:repo/releases/tags/:tag",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "tag": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the tag"
        }
      },
      "description": "Get a release by tag name."
    },
    "createRelease": {
      "url": "/repos/:owner/:repo/releases",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "tag_name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the tag"
        },
        "target_commitish": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)."
        },
        "name": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "draft": {
          "type": "boolean",
          "validation": "",
          "invalidmsg": "",
          "description": "true to create a draft (unpublished) release, false to create a published one. Default: false",
          "default": "false"
        },
        "prerelease": {
          "type": "boolean",
          "validation": "",
          "invalidmsg": "",
          "description": "true to identify the release as a prerelease. false to identify the release as a full release. Default: false",
          "default": "false"
        }
      },
      "description": "Create a release."
    },
    "editRelease": {
      "url": "/repos/:owner/:repo/releases/:id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "tag_name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "String of the tag"
        },
        "target_commitish": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)."
        },
        "name": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "body": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        },
        "draft": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "true to create a draft (unpublished) release, false to create a published one. Default: false",
          "default": "false"
        },
        "prerelease": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "true to identify the release as a prerelease. false to identify the release as a full release. Default: false",
          "default": "false"
        }
      },
      "description": "Edit a release."
    },
    "deleteRelease": {
      "url": "/repos/:owner/:repo/releases/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Delete a release"
    },
    "getAssets": {
      "url": "/repos/:owner/:repo/releases/:id/assets",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "List assets for a release."
    },
    "uploadAsset": {
      "url": "/:url",
      "method": "POST",
      "hasFileBody": true,
      "headers": {
        "content-type": ":contentType",
        "content-length": ":contentLength"
      },
      "timeout": 0,
      "params": {
        "$url": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "This endpoint makes use of a Hypermedia relation (https://developer.github.com/v3/#hypermedia) to determine which URL to access. This endpoint is provided by a URI template in the release's API response (https://developer.github.com/v3/repos/releases/#get-a-single-release). You need to use an HTTP client which supports SNI (https://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint."
        },
        "file": {
          "type": "Object",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "A file read stream, a String or a Buffer."
        },
        "$contentType": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The content type of the asset. This should be set in the Header. Example: 'application/zip'. For a list of acceptable types, refer this list of media types (https://www.iana.org/assignments/media-types/media-types.xhtml)"
        },
        "$contentLength": {
          "type": "number",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "File size in bytes."
        },
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The file name of the asset. This should be set in a URI query parameter."
        },
        "label": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter."
        }
      },
      "description": "Upload a release asset."
    },
    "getAsset": {
      "url": "/repos/:owner/:repo/releases/assets/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get a single release asset."
    },
    "editAsset": {
      "url": "/repos/:owner/:repo/releases/assets/:id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "$name": null,
        "label": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "An alternate short description of the asset. Used in place of the filename."
        }
      },
      "description": "Edit a release asset."
    },
    "deleteAsset": {
      "url": "/repos/:owner/:repo/releases/assets/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Delete a release asset."
    },
    "getStatsContributors": {
      "url": "/repos/:owner/:repo/stats/contributors",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get contributors list with additions, deletions, and commit counts."
    },
    "getStatsCommitActivity": {
      "url": "/repos/:owner/:repo/stats/commit_activity",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get the last year of commit activity data."
    },
    "getStatsCodeFrequency": {
      "url": "/repos/:owner/:repo/stats/code_frequency",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get the number of additions and deletions per week."
    },
    "getStatsParticipation": {
      "url": "/repos/:owner/:repo/stats/participation",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get the weekly commit count for the repository owner and everyone else."
    },
    "getStatsPunchCard": {
      "url": "/repos/:owner/:repo/stats/punch_card",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null
      },
      "description": "Get the number of commits per hour in each day."
    },
    "createStatus": {
      "url": "/repos/:owner/:repo/statuses/:sha",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$sha": null,
        "state": {
          "type": "string",
          "required": true,
          "validation": "^(pending|success|error|failure)$",
          "invalidmsg": "",
          "description": "State of the status - can be one of pending, success, error, or failure.",
          "enum": [
            "pending",
            "success",
            "error",
            "failure"
          ]
        },
        "target_url": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Target url to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the ‘source’ of the Status."
        },
        "description": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Short description of the status."
        },
        "context": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "A string label to differentiate this status from the status of other systems."
        }
      },
      "description": "Create a status."
    },
    "getStatuses": {
      "url": "/repos/:owner/:repo/commits/:ref/statuses",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "ref": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Ref to list the statuses from. It can be a SHA, a branch name, or a tag name."
        },
        "$page": null,
        "$per_page": null
      },
      "description": "List statuses for a specfic ref."
    },
    "getCombinedStatusForRef": {
      "url": "/repos/:owner/:repo/commits/:ref/status",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "ref": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "Ref to fetch the status for. It can be a SHA, a branch name, or a tag name."
        },
        "$page": null,
        "$per_page": null
      },
      "description": "Get the combined status for a specific ref."
    },
    "getReferrers": {
      "url": "/repos/:owner/:repo/traffic/popular/referrers",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get the top 10 referrers over the last 14 days."
    },
    "getPaths": {
      "url": "/repos/:owner/:repo/traffic/popular/paths",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get the top 10 popular contents over the last 14 days."
    },
    "getViews": {
      "url": "/repos/:owner/:repo/traffic/views",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get the total number of views and breakdown per day or week for the last 14 days."
    },
    "getClones": {
      "url": "/repos/:owner/:repo/traffic/clones",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Get the total number of clones and breakdown per day or week for the last 14 days."
    },
    "getHooks": {
      "url": "/repos/:owner/:repo/hooks",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List hooks."
    },
    "getHook": {
      "url": "/repos/:owner/:repo/hooks/:id",
      "method": "GET",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Get single hook."
    },
    "createHook": {
      "url": "/repos/:owner/:repo/hooks",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$name": null,
        "config": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "A Hash containing key/value pairs to provide settings for this hook. These settings vary between the services and are defined in the github-services repo. Booleans are stored internally as `1` for true, and `0` for false. Any JSON true/false values will be converted automatically."
        },
        "events": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines what events the hook is triggered for. Default: `['push']`.",
          "default": "[\"push\"]"
        },
        "active": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines whether the hook is actually triggered on pushes."
        }
      },
      "description": "Create a hook."
    },
    "editHook": {
      "url": "/repos/:owner/:repo/hooks/:id",
      "method": "PATCH",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null,
        "$name": null,
        "config": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "A Hash containing key/value pairs to provide settings for this hook. Modifying this will replace the entire config object. These settings vary between the services and are defined in the github-services repo. Booleans are stored internally as `1` for true, and `0` for false. Any JSON true/false values will be converted automatically."
        },
        "events": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines what events the hook is triggered for. This replaces the entire array of events. Default: `['push']`.",
          "default": "[\"push\"]"
        },
        "add_events": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines a list of events to be added to the list of events that the Hook triggers for."
        },
        "remove_events": {
          "type": "string[]",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines a list of events to be removed from the list of events that the Hook triggers for."
        },
        "active": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Determines whether the hook is actually triggered on pushes."
        }
      },
      "description": "Edit a hook."
    },
    "testHook": {
      "url": "/repos/:owner/:repo/hooks/:id/tests",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Test a [push] hook."
    },
    "pingHook": {
      "url": "/repos/:owner/:repo/hooks/:id/pings",
      "method": "POST",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Ping a hook."
    },
    "deleteHook": {
      "url": "/repos/:owner/:repo/hooks/:id",
      "method": "DELETE",
      "params": {
        "$owner": null,
        "$repo": null,
        "$id": null
      },
      "description": "Deleate a hook."
    }
  },
  "search": {
    "repos": {
      "url": "/search/repositories",
      "method": "GET",
      "params": {
        "$q": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(stars|forks|updated)$",
          "invalidmsg": "One of stars, forks, or updated. Default: results are sorted by best match.",
          "description": "stars, forks, or updated",
          "enum": [
            "stars",
            "forks",
            "updated"
          ]
        },
        "$order": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Search repositories."
    },
    "code": {
      "url": "/search/code",
      "method": "GET",
      "params": {
        "$q": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^indexed$",
          "invalidmsg": "indexed only",
          "description": "The sort field. Can only be indexed, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: results are sorted by best match.",
          "enum": [
            "indexed"
          ]
        },
        "$order": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Search code."
    },
    "commits": {
      "url": "/search/commits",
      "method": "GET",
      "params": {
        "$q": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(author-date|committer-date)$",
          "invalidmsg": "author-date or committer-date",
          "description": "The sort field. Can be author-date or committer-date. Default: best match.",
          "enum": [
            "author-date",
            "committer-date"
          ]
        },
        "$order": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Search commits. (In preview period. See README.)"
    },
    "issues": {
      "url": "/search/issues",
      "method": "GET",
      "params": {
        "$q": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(comments|created|updated)$",
          "invalidmsg": "comments, created, or updated",
          "description": "The sort field. Can be comments, created, or updated. Default: results are sorted by best match.",
          "enum": [
            "comments",
            "created",
            "updated"
          ]
        },
        "$order": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Search issues."
    },
    "users": {
      "url": "/search/users",
      "method": "GET",
      "params": {
        "$q": null,
        "sort": {
          "type": "string",
          "required": false,
          "validation": "^(followers|repositories|joined)$",
          "invalidmsg": "Can be followers, repositories, or joined. Default: results are sorted by best match.",
          "description": "The sort field. Can be followers, repositories, or joined. Default: results are sorted by best match.",
          "enum": [
            "followers",
            "repositories",
            "joined"
          ]
        },
        "$order": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Search users."
    },
    "email": {
      "url": "/legacy/user/email/:email",
      "method": "GET",
      "params": {
        "email": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The email address"
        }
      },
      "description": "Search against public email addresses."
    }
  },
  "users": {
    "get": {
      "url": "/user",
      "method": "GET",
      "params": {},
      "description": "Get the authenticated user"
    },
    "update": {
      "url": "/user",
      "method": "PATCH",
      "params": {
        "name": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new name of the user"
        },
        "email": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Publicly visible email address."
        },
        "blog": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new blog URL of the user."
        },
        "company": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new company of the user."
        },
        "location": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new location of the user."
        },
        "hireable": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new hiring availability of the user."
        },
        "bio": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The new short biography of the user."
        }
      },
      "description": "Update the authenticated user"
    },
    "promote": {
      "url": "/users/:username/site_admin",
      "method": "PUT",
      "params": {
        "$username": null
      },
      "description": "Promote an ordinary user to a site administrator"
    },
    "demote": {
      "url": "/users/:username/site_admin",
      "method": "DELETE",
      "params": {
        "$username": null
      },
      "description": "Demote a site administrator to an ordinary user"
    },
    "suspend": {
      "url": "/users/:username/suspended",
      "method": "PUT",
      "params": {
        "$username": null
      },
      "description": "Suspend a user"
    },
    "unsuspend": {
      "url": "/users/:username/suspended",
      "method": "DELETE",
      "params": {
        "$username": null
      },
      "description": "Unsuspend a user"
    },
    "getForUser": {
      "url": "/users/:username",
      "method": "GET",
      "params": {
        "$username": null
      },
      "description": "Get a single user"
    },
    "getById": {
      "url": "/user/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single user by GitHub ID"
    },
    "getAll": {
      "url": "/users",
      "method": "GET",
      "params": {
        "since": {
          "type": "number",
          "required": false,
          "validation": "",
          "description": "The integer ID of the last User that you’ve seen."
        }
      },
      "description": "Get all users"
    },
    "getOrgs": {
      "url": "/user/orgs",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List organizations for the authenticated user."
    },
    "getOrgMemberships": {
      "url": "/user/memberships/orgs",
      "method": "GET",
      "params": {
        "state": {
          "type": "string",
          "required": false,
          "validation": "^(active|pending)$",
          "invalidmsg": "active, pending",
          "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
          "enum": [
            "active",
            "pending"
          ]
        }
      },
      "description": "List your organization memberships"
    },
    "getOrgMembership": {
      "url": "/user/memberships/orgs/:org",
      "method": "GET",
      "params": {
        "$org": null
      },
      "description": "Get your organization membership"
    },
    "editOrgMembership": {
      "url": "/user/memberships/orgs/:org",
      "method": "PATCH",
      "params": {
        "$org": null,
        "state": {
          "type": "string",
          "required": true,
          "validation": "^(active)$",
          "invalidmsg": "active",
          "description": "The state that the membership should be in. Only \"active\" will be accepted.",
          "enum": [
            "active"
          ]
        }
      },
      "description": "Edit your organization membership."
    },
    "getTeams": {
      "url": "/user/teams",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "Get your teams."
    },
    "getEmails": {
      "url": "/user/emails",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List email addresses for a user."
    },
    "getPublicEmails": {
      "url": "/user/public_emails",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List public email addresses for a user."
    },
    "addEmails": {
      "url": "/user/emails",
      "method": "POST",
      "params": {
        "emails": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "You can post a single email address or an array of addresses."
        }
      },
      "description": "Add email address(es)."
    },
    "deleteEmails": {
      "url": "/user/emails",
      "method": "DELETE",
      "params": {
        "emails": {
          "type": "string[]",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "You can post a single email address or an array of addresses."
        }
      },
      "description": "Delete email address(es)."
    },
    "togglePrimaryEmailVisibility": {
      "url": "/user/email/visibility",
      "method": "PATCH",
      "params": {},
      "description": "Toggle primary email visibility."
    },
    "getFollowersForUser": {
      "url": "/users/:username/followers",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List a user's followers"
    },
    "getFollowers": {
      "url": "/user/followers",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List the authenticated user's followers"
    },
    "getFollowingForUser": {
      "url": "/users/:username/following",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List who a user is following"
    },
    "getFollowing": {
      "url": "/user/following",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List who the authenticated user is following"
    },
    "checkFollowing": {
      "url": "/user/following/:username",
      "method": "GET",
      "params": {
        "$username": null
      },
      "description": "Check if you are following a user"
    },
    "checkIfOneFollowersOther": {
      "url": "/users/:username/following/:target_user",
      "method": "GET",
      "params": {
        "$username": null,
        "target_user": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Check if one user follows another"
    },
    "followUser": {
      "url": "/user/following/:username",
      "method": "PUT",
      "params": {
        "$username": null
      },
      "description": "Follow a user"
    },
    "unfollowUser": {
      "url": "/user/following/:username",
      "method": "DELETE",
      "params": {
        "$username": null
      },
      "description": "Unfollow a user"
    },
    "getKeysForUser": {
      "url": "/users/:username/keys",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List public keys for a user"
    },
    "getKeys": {
      "url": "/user/keys",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List your public keys"
    },
    "getKey": {
      "url": "/user/keys/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single public key"
    },
    "createKey": {
      "url": "/user/keys",
      "method": "POST",
      "params": {
        "$title": null,
        "$key": null
      },
      "description": "Create a public key"
    },
    "deleteKey": {
      "url": "/user/keys/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a public key"
    },
    "getGpgKeysForUser": {
      "url": "/users/:username/gpg_keys",
      "method": "GET",
      "params": {
        "$username": null,
        "$page": null,
        "$per_page": null
      },
      "description": "Lists the GPG keys for a user. This information is accessible by anyone. (In preview period. See README.)"
    },
    "getGpgKeys": {
      "url": "/user/gpg_keys",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List your GPG keys. (In preview period. See README.)"
    },
    "getGpgKey": {
      "url": "/user/gpg_keys/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single GPG key. (In preview period. See README.)"
    },
    "createGpgKey": {
      "url": "/user/gpg_keys",
      "method": "POST",
      "params": {
        "armored_public_key": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "GPG key contents"
        }
      },
      "description": "Create a GPG key. (In preview period. See README.)"
    },
    "deleteGpgKey": {
      "url": "/user/gpg_keys/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a GPG key. (In preview period. See README.)"
    },
    "getBlockedUsers": {
      "url": "/user/blocks",
      "method": "GET",
      "params": {},
      "description": "List blocked users. (In preview period. See README.)"
    },
    "checkBlockedUser": {
      "url": "/user/blocks/:username",
      "method": "GET",
      "params": {
        "$username": null
      },
      "description": "Check whether you've blocked a user. (In preview period. See README.)"
    },
    "blockUser": {
      "url": "/user/blocks/:username",
      "method": "PUT",
      "params": {
        "$username": null
      },
      "description": "Block a user. (In preview period. See README.)"
    },
    "unblockUser": {
      "url": "/user/blocks/:username",
      "method": "DELETE",
      "params": {
        "$username": null
      },
      "description": "Unblock a user. (In preview period. See README.)"
    },
    "getRepoInvites": {
      "url": "/user/repository_invitations",
      "method": "GET",
      "params": {},
      "description": "List a user's repository invitations."
    },
    "acceptRepoInvite": {
      "url": "/user/repository_invitations/:invitation_id",
      "method": "PATCH",
      "params": {
        "$invitation_id": null
      },
      "description": "Accept a repository invitation."
    },
    "declineRepoInvite": {
      "url": "/user/repository_invitations/:invitation_id",
      "method": "DELETE",
      "params": {
        "$invitation_id": null
      },
      "description": "Decline a repository invitation."
    },
    "getInstallations": {
      "url": "/user/installations",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "List installations. (In preview period. See README.)"
    },
    "getInstallationRepos": {
      "url": "/user/installations/:installation_id/repositories",
      "method": "GET",
      "params": {
        "$installation_id": null,
        "$page": null,
        "$per_page": null
      },
      "description": "List repositories accessible to the user for an installation. (In preview period. See README.)"
    },
    "addRepoToInstallation": {
      "url": "/user/installations/:installation_id/repositories/:repository_id",
      "method": "PUT",
      "params": {
        "$installation_id": null,
        "$repository_id": null
      },
      "description": "Add a single repository to an installation. (In preview period. See README.)"
    },
    "removeRepoFromInstallation": {
      "url": "/user/installations/:installation_id/repositories/:repository_id",
      "method": "DELETE",
      "params": {
        "$installation_id": null,
        "$repository_id": null
      },
      "description": "Remove a single repository from an installation. (In preview period. See README.)"
    },
    "getMarketplacePurchases": {
      "url": "/user/marketplace_purchases",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "Get a user's Marketplace purchases. (In preview period. See README.)"
    },
    "getMarketplaceStubbedPurchases": {
      "url": "/user/marketplace_purchases/stubbed",
      "method": "GET",
      "params": {
        "$page": null,
        "$per_page": null
      },
      "description": "Get a user's stubbed Marketplace purchases. (In preview period. See README.)"
    }
  },
  "enterprise": {
    "stats": {
      "url": "/enterprise/stats/:type",
      "method": "GET",
      "params": {
        "type": {
          "type": "string",
          "required": true,
          "validation": "^(issues|hooks|milestones|orgs|comments|pages|users|gists|pulls|repos|all)$",
          "invalidmsg": "Possible values: issues, hooks, milestones, orgs, comments, pages, users, gists, pulls, repos, all.",
          "description": "Possible values: issues, hooks, milestones, orgs, comments, pages, users, gists, pulls, repos, all.",
          "enum": [
            "issues",
            "hooks",
            "milestones",
            "orgs",
            "comments",
            "pages",
            "users",
            "gists",
            "pulls",
            "repos",
            "all"
          ]
        }
      },
      "description": "Get statistics."
    },
    "updateLdapForUser": {
      "url": "/admin/ldap/users/:username/mapping",
      "method": "PATCH",
      "params": {
        "$username": null,
        "ldap_dn": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "Invalid DN",
          "description": "LDAP DN for user"
        }
      },
      "description": "Update LDAP mapping for a user."
    },
    "syncLdapForUser": {
      "url": "/admin/ldap/users/:username/sync",
      "method": "POST",
      "params": {
        "$username": null
      },
      "description": "Sync LDAP mapping for a user."
    },
    "updateLdapForTeam": {
      "url": "/admin/ldap/teams/:team_id/mapping",
      "method": "PATCH",
      "params": {
        "team_id": {
          "type": "number",
          "required": true,
          "validation": "^[0-9]+$",
          "invalidmsg": "",
          "description": ""
        },
        "ldap_dn": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "Invalid DN",
          "description": "LDAP DN for user"
        }
      },
      "description": "Update LDAP mapping for a team."
    },
    "syncLdapForTeam": {
      "url": "/admin/ldap/teams/:team_id/sync",
      "method": "POST",
      "params": {
        "team_id": {
          "type": "number",
          "required": true,
          "validation": "^[0-9]+$",
          "invalidmsg": "",
          "description": ""
        }
      },
      "description": "Sync LDAP mapping for a team."
    },
    "getLicense": {
      "url": "/enterprise/settings/license",
      "method": "GET",
      "params": {},
      "description": "Get license information"
    },
    "getPreReceiveEnvironment": {
      "url": "/admin/pre-receive-environments/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single pre-receive environment. (In preview period. See README.)"
    },
    "getPreReceiveEnvironments": {
      "url": "/admin/pre_receive_environments",
      "method": "GET",
      "params": {},
      "description": "List pre-receive environments. (In preview period. See README.)"
    },
    "createPreReceiveEnvironment": {
      "url": "/admin/pre_receive_environments",
      "method": "POST",
      "params": {
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The new pre-receive environment's name."
        },
        "image_url": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "URL from which to download a tarball of this environment."
        }
      },
      "description": "Create a pre-receive environment. (In preview period. See README.)"
    },
    "editPreReceiveEnvironment": {
      "url": "/admin/pre_receive_environments/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "This pre-receive environment's new name."
        },
        "image_url": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "URL from which to download a tarball of this environment."
        }
      },
      "description": "Create a pre-receive environment. (In preview period. See README.)"
    },
    "deletePreReceiveEnvironment": {
      "url": "/admin/pre_receive_environments/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a pre-receive environment. (In preview period. See README.)"
    },
    "getPreReceiveEnvironmentDownloadStatus": {
      "url": "/admin/pre-receive-environments/:id/downloads/latest",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a pre-receive environment's download status. (In preview period. See README.)"
    },
    "triggerPreReceiveEnvironmentDownload": {
      "url": "/admin/pre_receive_environments/:id/downloads",
      "method": "POST",
      "params": {
        "$id": null
      },
      "description": "Trigger a pre-receive environment download. (In preview period. See README.)"
    },
    "getPreReceiveHook": {
      "url": "/admin/pre-receive-hooks/:id",
      "method": "GET",
      "params": {
        "$id": null
      },
      "description": "Get a single pre-receive hook. (In preview period. See README.)"
    },
    "getPreReceiveHooks": {
      "url": "/admin/pre-receive-hooks",
      "method": "GET",
      "params": {},
      "description": "List pre-receive hooks. (In preview period. See README.)"
    },
    "createPreReceiveHook": {
      "url": "/admin/pre-receive-hooks",
      "method": "POST",
      "params": {
        "name": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The name of the hook."
        },
        "script": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The script that the hook runs."
        },
        "script_repository": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The GitHub repository where the script is kept."
        },
        "environment": {
          "type": "Json",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The pre-receive environment where the script is executed."
        },
        "enforcement": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The state of enforcement for this hook. default: disabled",
          "default": "disabled"
        },
        "allow_downstream_configuration": {
          "type": "boolean",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "Whether enforcement can be overridden at the org or repo level. default: false",
          "default": "false"
        }
      },
      "description": "Create a pre-receive hook. (In preview period. See README.)"
    },
    "editPreReceiveHook": {
      "url": "/admin/pre_receive_hooks/:id",
      "method": "PATCH",
      "params": {
        "$id": null,
        "hook": {
          "type": "Json",
          "sendValueAsBody": true,
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "JSON object that contains pre-receive hook info."
        }
      },
      "description": "Edit a pre-receive hook. (In preview period. See README.)"
    },
    "deletePreReceiveHook": {
      "url": "/admin/pre_receive_hooks/:id",
      "method": "DELETE",
      "params": {
        "$id": null
      },
      "description": "Delete a pre-receive hook. (In preview period. See README.)"
    },
    "queueIndexingJob": {
      "url": "/staff/indexing_jobs",
      "method": "POST",
      "params": {
        "target": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "A string representing the item to index."
        }
      },
      "description": "Queue an indexing job"
    },
    "createOrg": {
      "url": "/admin/organizations",
      "method": "POST",
      "params": {
        "login": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The organization's username."
        },
        "admin": {
          "type": "string",
          "required": true,
          "validation": "",
          "invalidmsg": "",
          "description": "The login of the user who will manage this organization."
        },
        "profile_name": {
          "type": "string",
          "required": false,
          "validation": "",
          "invalidmsg": "",
          "description": "The organization's display name."
        }
      },
      "description": "Create an organization"
    }
  }
}
